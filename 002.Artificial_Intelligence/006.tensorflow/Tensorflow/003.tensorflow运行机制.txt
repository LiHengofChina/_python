
//============================================= 运行机制
//============================================= 运行机制

（1）程序员用 键盘输入python代码，

（2）用python代码写入了 tensorflow 代码。
		// C++、JAVA、go都能写

	 /*
		python相当于是一个客户端

		tensorflow 相当于服务端，

		客户端写的代码，交给了服务端执行

		python定义的代码，直接执行的是  tensorflow
	 */

Python 解释器将 TensorFlow 代码传递给 TensorFlow 运行时进行执行。

执行结果会返回给python。

//================ TensorFlow 中定义和运行是相分离的机制
//================ TensorFlow 中定义和运行是相分离的机制


先定义再运行。

定义：
	1、定义数据
	2、定义模型
	3、定义损失函数
	4、定义求损失函数的极小值

运行：
	此时才会真正开始训练


//================ 抽你为以下角色
//================ 抽你为以下角色
（1）客户端：用户编程、执行使用，//如python
（2）master：调度器，谁执行谁，由master统一进行调度的。
（3）worker process: 工作节点，每个worker process可以访问一到多个device
（4）eevice :TF的计算核心，执行计算

//================ 模式
//================ 模式

"单机模式" 与 "分布式模型"

//============== 单机模式
//============== 单机模式
master:只开启一个 "工作节点"


//============== 单机模式
//============== 单机模式
master:开启多个一个 "工作节点"

//================ 逻辑层次
//================ 逻辑层次


（7）其它类库
（6）应用层
（5）Python、C++、Java
（4）核心API
（3）单机模型、本地计算图
（2）数据操作层：Const Var、Relu，矩阵相乘//核心计算层
（1）网络层、设备层、物理





