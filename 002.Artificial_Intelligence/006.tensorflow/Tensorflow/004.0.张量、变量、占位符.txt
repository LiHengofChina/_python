

//======================================================= 【1】张量
//======================================================= 【1】张量


Tensor ：多维数组或向量，张量是数据的载体， 包括名字、形状、数据类型等等属性

		//张量：每一个张量都有自己的名字的。
	没有其它数据类型，只有张量

//===== 张量的阶
//===== 张量的阶
	和一维数组、二维数组、三维数据是一样的
	张量里面叫阶
	数广播号的层数

//===== 张量的形状
//===== 张量的形状
	有0维：普通数字，1 2 3、字符串等等。用()表示
	1维: (5)， 1行5个元素
	2维: (2,3)，2行3列
	3维: (2,3,4)，两个3行4列的矩阵

//===== 数据类型
//===== 数据类型
	和数组一样的

tf.constant([1,2,3,4,5],dtype='int32')
tf.constant([1,2,3,4,5],dtype=tf.int32)

//===== 基本属性
//===== 基本属性
graph  #所属的默认图

op    #张量的操作名
		name   名字
		shape  形状  
		dtype  元素类型

//===== 创建张量
//===== 创建张量


tensor1d.eval()
tensor2d.eval()	# eval 只执行指定的张量


//最常用的几个


# 一般用来构建偏重的初始值
# 一般用来构建偏重的初始值

tensor1d = tf.constant(
ones 	 = tf.ones(
zeros	 = tf.zeros(


# 一般用来构建权重的初始值，
# 一般用来构建权重的初始值，
# tensornd = tf.random_normal(shape=(2,2), mean=1.8, stddev=1.0) #1.14写法
tensornd = tf.random.normal(shape=(2, 2), mean=1.8, stddev=1.0)  #2.15写法



//===== 张量的类型转换
//===== 张量的类型转换

整数转浮点、浮点转整型等等。
//===== 指定转换
string_to_number(string_tensor)
tf.to_double(x)
tf.to_float(x)

tf.to_int32(x)
tf.to_int64(x)

//===== 指定转换
//===== 指定转换
tf.cat(x,dtype)

//===== 改变张量的形状
//===== 改变张量的形状

在卷积的时候可能使用的是一维特征、二维特征。
但全连接层的时候，只能是一维特征，


所以就有	2 ——> 1		3 ——> 1 这些场景

//静态形状：在创建一个张量，初始状态的形状
tf.Tensor.get_shape():
tf.Tensor.set_shape():

		//====================================== 静态形状的区别
		//（1）不能跨阶去改变形状；1维只能到2维
		//		如：固定（3,2），就不能变了
		//		如：N,3 这个N行3列这个就没有固定
		//		如：本来是 N,3 ，现在固定成2,3是可以的。
		//（2）对于已经设置或者 "静态形状的张量"，不能再次设置静态形状。



//动态形状：在运行图时，动态形状才是真正用到的，
		"这种形状" 是一种描述原始系统架构在执行过程中的一种张量。
		//==========
		但是动态形状：可以跨阶进行设置，
		动态形状才是搭建网络、搭建模型需要用到的形状
		（1）tf.reshape(t.Tensor,shape)创建一个具有"不同动态形状的新张量"
		（2）跨纬度转换： 1D --> 2D , 1D--> 3D

//===== 张量的数学运算
//===== 张量的数学运算

#常用的5个

tf.add(x,y) 			#张量相加 
						//对应位置相加

tf.matmul(x,y)			#张量相乘
						//矩阵乘法。

tf.log(x)				#求系统架构的自然对数
						//以e为底，x的对数

tf.reduce_sum(x,axis)	#计算张量指定维度上总和
						//求每一行的和或者每一列的和
						//axis = 0，求每一列的和
						//axis = 1，求每一行的和

tf.segment_sum(data, segment_ids)	#计算张量片段总和




//======================================================= 变量
//======================================================= 变量


// 变量 和 张量的主要区别：
//  "变量保存的数据" 可以持久化，
//  "张量"保存的数据不能持久化。		

"变量" 是 "特殊的张量"


变量在 Tensorflow中，变量是一种操作，
变量一种特殊的 "张量"，能够进行存储持久化，它的值是张量
张量不能进行持久化。

w = tf.constant(100)#张量  # 普通数据

w = tf.Variable(100)#变量  # 可以保存到文件，#主要模型参数，可以持久化

//======== 使用场景
//======== 使用场景

"模型参数" 一般是通过变量来进行保存的


//======== 定义变量
//======== 定义变量

定义变量时，需要在会话中进行初始化

tf.Variable(initial_value=None,name=None)
			//initial_value是给初始值。


//======================================= 占位符
//======================================= 占位符

占位符 是变量的占位符号，
当不能确定变量值时，可以先声明一个占位符号，真正执行时再传入变量。
类似形参

sm.accuracy(占位符)
name = placeholder(dtype,shape=None,name=None)
 