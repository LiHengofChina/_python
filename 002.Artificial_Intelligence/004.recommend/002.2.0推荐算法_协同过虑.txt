

//==============================  "协同过滤" 分支 的分类 
//==============================  "协同过滤" 分支 的分类 
 
//==============【一】"基于内存的协同过滤/基于邻域" 的协同过滤
//==============【一】"基于内存的协同过滤/基于邻域" 的协同过滤

		核心思想，找统计或类似的方法，在数据当中找到  "具有相同爱号的用户"。
		//如：用距离计算样本与样本的相似度，找到相似的用户、或相似的商品。
		（1）UCF 用户与用户之间的相似度
				/**
				 （1）用户来了
				 （2）关系数据 //网站的历史数据，找到最相似的数据
				 （3）用户偏好数据
				 （4）过滤
				 （5）相似用户买过的商品，登陆用户没有买过的商品
				 （6）计算推荐值
				 （7）用推荐值排序推荐给用户
				*/

		（2）ICF 商品与商品的相似度
				/**
				 （1）用户来了
				 （2）分析用户偏好数据，偏好数据来自日志文件，得到被推荐商品集合
								//日志文件来自"推荐引擎"
								//用户行为触发的某些日志，埋点数据。
				 （3）得到关系数据，之前购买记录的评分
				 （4）计算推荐值
				 （5）用推荐值排序推荐给用户
				*/
				//==================================== 距离指标
				//==================================== 距离指标
				欧几里得距离
				马哈拉诺比斯距离
				曼哈顿距离
				切比雪夫距离
				明可夫斯距离
				海明距离
				//==================================== 相似度指标
				//==================================== 相似度指标
				余弦
				皮尔森
				Jaccard相似系统
				Tanimoto系数
				对数似然
				互信息/信息增益
				信息检索
				词对相似度

//==============【二】基于 "模型" 的协同过滤
//==============【二】基于 "模型" 的协同过滤

先用历史数据得到一个模型，再用此模型进行预测。

//如：双11时，淘宝想要给你推荐一点东西，先拿到你在淘宝上面整体的购买记录，
//针对你的购买记录，建立一个模型，预测你要双11时最可能买什么商品。

		用 "聚类算法" 做做协同过滤						
			（1）K-Means
				//K-Means，你离哪个聚类中心更近，你就属于哪个聚类的类别
				//我拿到全部的待预测的数据，看看你属于哪一类。						
			（2）BIRCH
				//和 "凝聚层次" 类似。


		用 "分类算法" 做做协同过滤 
			（1）逻辑回归
			（2）朴素贝叶斯


		用 "回归算法" 做做协同过滤
		用 "矩阵分解" 做做协同过滤
				//当前用户对每一个商品的评分：
				//用矩阵分解的方式进行理解
				//从k个角度描述当前用户评分。
				//k角度越多，描述越详细
				//但收集数据非常麻烦

		用 "神经网络" 做做协同过滤
				//无隐层
				//单隐层
				//双隐层
				

		用 "图模型" 做做协同过滤
		用 "隐语义" 做做协同过滤


		找到一个算法，把数据带到算法当中，让它去进行学习，然后做一个预测，这样的套路
 
 
 
 
//==============【三】基于 "关联算法" 的协同过滤
//==============【三】基于 "关联算法" 的协同过滤
		用 "关联算法" 做做协同过滤 //哪些商品同时出现，酱油和醋
				（1）Apriori	//比较出名，沃尔玛超市，当时聘请了IBM 作为商业顾问，
						//通过所有用户在POS机上面的购物小票，他们找到了有两个风马牛不相及的商品
						//经常会被一起购买：啤酒 和 尿布
						//弊端：多次遍历数据库

				（2）FPGROWTH
						//对 Apriori 的升级版，它只需要遍历数据库两次，就能得到想到的结果。、
						//效率有所提升，它通过树形结构来保存商品



 