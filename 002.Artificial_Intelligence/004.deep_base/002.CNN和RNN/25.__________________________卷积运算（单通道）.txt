


//========================================================================= 卷积运算（单通道、二维卷积运算）
//========================================================================= 卷积运算（单通道、二维卷积运算）




//============= 单通道、二维卷积运算示例

输入数据: //这是一副图像，它的每个值，它当前的像素值
1 2 3 0
0 2 2 3
3 0 1 2
2 3 0 1


//============  滤波器：//卷积核： 

2 0 1
0 1 2
1 0 2


//opencv中讲过，值全部为1的 "卷积核"，值为高斯分布的 "卷积核",这些都是固定的



但是在: "深度学习中"，卷积核当中的 "这些值" ，应该是由 "模型自己去学习的"
因为 "输入图像是固定的"，
你当前 "卷积提取出来的特征" 结果是多少与 "卷积核当中的权重值"  是有很大关系的。
所以当你 "卷积核当中的权重值" 不一样， "你提取到的特征" 就不一样，

"你提取到的特征" 不一样，就代表，你最终的精度不一样。

		/**
		如：
			第一次，你提取到了眼睛，
			第二次，你提取到了黑眼球，			
			每次提取不一样的东西，识别的精度也就不一样
		*/

所以 "深度学习" 中： 
		"卷积核当中的权重值" 都是给它一个 "初始值"，
		用 "初始值" 提取特征，
		提完特征，去学习做预测，

		根据"预测结果" 和 "真实值" 构建损失函数
		用 "损失函数" 不断地去 "调整权重值"，
		让  "提取出来的特征" 达到 "损失函数最小的状态"。

	它是不断的 "调整卷积核当中的权重值"。
	找到：通过 "哪些卷积核当中的权重值" 提取到的特征 能够达到 预测最准的状态。


 

//========================================================================= 第一个卷积核
//========================================================================= 第一个卷积核

1 2 3  0              2 0 1
0 2 2  3      *       0 1 2
3 0 1  2              1 0 2

2 3 0 1


原始图像是： 4 * 4
卷积核是：	 3 * 3		// 卷积核 一般是 n*n的小图像，n一般取奇数，值代表的是权重


拿到卷积核中的 "第一个中心点"

去 "对齐" "原始图像" 的第一个 3 * 3 区域的中心点
//根据前面说的公式： 离散的是 "对应位置相乘"  "再求和"
那么：
1 2 3     2 0 1
0 2 2  *  0 1 2
3 0 1     1 0 2

1*2 + 2*0 + 3*1 + 0*0 + 2*1 + 2*2 +3*1 + 0*0 + 1*2 = 15

// "对应位置相乘" ，然后 "全部相加"



这个15就代表 "这个卷积核" 在 "原始图像上面3*3区域上面" 提取的 "特征"
	// 就是说 "这一个值15" 就代表了 "原始图像的第一个3*3区域" 


//========================================================================= 第二个卷积核
//========================================================================= 第二个卷积核

当 第1个 3*3区域计算完之后 ，再向右移动一个单位，

 2 3 0              2 0 1
 2 2 3      *       0 1 2
 0 1 2              1 0 2

得到16
	// 就是说 "这一个值16	" 就代表了 "原始图像的第二个3*3区域" 

//========================================================================= 第三个卷积核
//========================================================================= 第三个卷积核
当第一行卷完了之后，
换成第二行，还是从左向右

 0 2 2              2 0 1
 3 0 1      *       0 1 2
 2 3 0              1 0 2

得到：6
//========================================================================= 第四个卷积核
//========================================================================= 第四个卷积核
 

 2 2 3              2 0 1
 0 1 2      *       0 1 2
 3 0 1              1 0 2

得到：16

//========================================================================= 最终结果
//========================================================================= 最终结果

最后得到的结果：

15 16
6  15

这也就意味着，现在用这个 2 * 2 卷积结果，表达了原始的 4 * 4 图像，


这个 "2 * 2 卷积结果" 英文名字就叫：feature map，特征图。


通过 特征图 来进行预测

1 2 3 0              2 0 1          15 16
0 2 2 3      *       0 1 2     =    6  15    
3 0 1 2              1 0 2
2 3 0 1


//========================================================================= 单通道、二维卷积 + 带偏置 卷积
//========================================================================= 单通道、二维卷积 + 带偏置 卷积
//================================== 另外
//================================== 另外

"卷积核" 中有一大堆权重，另外还有 "偏置"


单通道、二维、带偏置

1 2 3 0              2 0 1       	     18 19
0 2 2 3      *       0 1 2   +  3   =    9  18
3 0 1 2              1 0 2
2 3 0 1


这里的 3 ，就是偏置，

"偏置" 也是  "调整卷积结果的值"
偏置 不同，得到的结果也不一样。



所以学习的就主要是 ： "卷积核中的值"  +  "偏置"
所以还是 w 和 b  




//========================================================================= 同维卷积
//========================================================================= 同维卷积



不管是 "单通道、二维卷积"
还是 "单通道、二维卷积"

4*4 图像通过 3*3 卷积核得到 2*2特征图
特征图比原始图像小了


//================================ padding: 1 ，带填充的 "单通道、二维卷积"  卷积
//================================ padding: 1 ，带填充的 "单通道、二维卷积"  卷积



填充：指在周围填一圈0， 再运算

0 0 0 0 0 0             2 0 1          	 7  12 10 2
0 0 2 2 3 0      *      0 1 2     =    	 4  15 16 10
0 3 0 1 2 0             1 0 2			 10 6  15 6
0 2 3 0 1 0								 8  10 4  3
0 0 0 0 0 0

填0之后，再次运算得到的大小和原来一样 4*4
这种卷积叫 "同维卷积"，就 "卷积结果" 和 "原始图像大小" 一样。


//================================ 为什么要添加 一圈0

之前是：
拿到卷积核中的 "第一个中心点"，去 "对齐" "原始图像" 的第一个 3 * 3 区域的中心点

除了这样做，
		还可以 "对齐每个像素"拿到卷积核中的 "第一个中心点"，去 "对齐" "原始图像" 的第一个像素值，

对齐 之后，无法计算， 所以给原始图像都补齐一个0，让它也能进行计算。



所以：
padding: 1，表示填充一圈0
padding: 2，表示填充两圈0



//========================================================================= 步幅：stride 为2的卷积
//========================================================================= 步幅：stride 为2的卷积
在运算时：
		偏移为1，就步幅1
		偏移为2，就步幅2

步幅就是指 "向右" 或 "向下" 要移动的单位。

步幅越大，能卷出来的结果就越少。


示例：
 	5*5 的图，卷积核为 3*3 ，步幅为2的话，结果是 2*2 大小 。



//========================================================================= 计算卷积结果的维度：
//========================================================================= 计算卷积结果的维度：


卷积结果的维度相关因素：

		（1）步幅：stride
		（2）填充：padding
		（3）卷积核
		（4）原始图像的尺寸

//============ 计算公式
//============ 计算公式

高度：	OH = (H + 2P -FH) / S + 1
宽度：	OW = (W + 2P -FW) / S + 1


//=========================================================================
//=========================================================================

单通道二维卷积：其实就相当于是灰度图像


