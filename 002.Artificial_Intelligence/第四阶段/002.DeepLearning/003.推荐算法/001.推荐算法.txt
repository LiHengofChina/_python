
//==========================================================（数据属性） 推荐算法：
//==========================================================（数据属性） 推荐算法：

最常用的  "个性化推荐算法"，

如果你想对 "当前数据" 进行推荐，

推荐算法：一定要体现出下面几个因素：

		/**
			推荐算法：它其实是拿到一些 "历史数据"，对 "历史数据" 进行一些分析，
			根据历史数据 "进行预测"，你可能最喜欢哪个商品。

			所以是同样的套路：拿到数据，才能去推荐

			拿到数据的哪些属性
		*/

（1）人口属性
			//男的、女的、已婚的、未婚的
			//是否戴眼镜，是否留胡子，这些都是人口属性

（2）地理属性
			//当前你所在的位置，你所在的地区、风俗、习俗。
			//是平原、还是盆地

（3）资产属性
			//你有多少钱，你的账户余额，你有多少房，有多少车

			//金额产品是知道的。

（4）兴趣属性
			//旅游、玩车


通过上面这些属性 "准确的去描述一个人"，对这个人进行推荐

知道其中的 "一种或两种属性" 进行推荐的，
比如说： 金额产品知道你的：资产属性
		 交友APP知道你的：人口属性、地理属性

但是没有app能拿到你目前这四种属性了，
如果能拿到，就能做最准确的推荐了。

由于数据是核心资产，所以没有公司会把数据轻易给对方。


所以推荐算法的核心是：数据

拿到数据之后，针对数据选择对应的算法

//==========================================================（算法属性） 推荐算法-分支：
//==========================================================（算法属性） 推荐算法-分支：



"协同过滤"推荐算法
			（1） "基于内存的协同过滤/基于邻域" 的协同过滤
								//核心思想，找统计或类似的方法，在数据当中找到具有相同爱号的用户。
								//如：用距离计算样本与样本的相似度，找到相似的用户、或相似的商品。
						（1）UCF 用户与用户之间的相似商
								/**
								 （1）用户来了
								 （2）关系数据 //网站的历史数据，找到最相似的数据
								 （3）用户偏好数据
								 （4）过滤
								 （5）相似用户买过的商品，登陆用户没有买过的商品
								 （6）计算推荐值
								 （7）用推荐值排序推荐给用户
								*/

						（2）ICF 商品与商品的相似度
								/**
								 （1）用户来了
								 （2）分析用户偏好数据，偏好数据来自日志文件，得到被推荐商品集合
												//日志文件来自"推荐引擎"
												//用户行为触发的某些日志，埋点数据。
								 （3）得到关系数据，之前购买记录的评分
								 （4）计算推荐值
								 （5）用推荐值排序推荐给用户

								*/
					//==================================== 距离指标
					//==================================== 距离指标
					欧几里得距离
					马哈拉诺比斯距离
					曼哈顿距离
					切比雪夫距离
					明可夫斯距离
					海明距离
					//==================================== 相似度指标
					//==================================== 相似度指标
					余弦
					皮尔森
					Jaccard相似系统
					Tanimoto系数
					对数似然
					互信息/信息增益
					信息检索
					词对相似度


			（2）基于 "模型的" 协同过滤
								//先用历史数据得到一个模型，再用此模型进行预测。
								//如：双11时，淘宝想要给你推荐一点东西，先拿到你在淘宝上面整体的购买记录，
								//针对你的购买记录，建立一个模型，预测你要双11时最可能买什么商品。


					用 "聚类算法" 做做协同过滤						
						（1）K-Means
							//K-Means，你离哪个聚类中心更近，你就属于哪个聚类的类别
							//我拿到全部的待预测的数据，看看你属于哪一类。						
						（2）BIRCH
							//和凝聚层次类似。


					用 "分类算法" 做做协同过滤 
						（1）逻辑回归
						（2）朴素贝叶斯


					用 "回归算法" 做做协同过滤
					用 "矩阵分解" 做做协同过滤
							//当前用户对每一个商品的评分：
							//用矩阵分解的方式进行理解
							//从k个角度描述当前用户评分。
							//k角度越多，描述越详细

					用 "神经网络" 做做协同过滤
							//

					用 "图模型" 做做协同过滤
					用 "隐语义" 做做协同过滤


					找到一个算法，把数据带到算法当中，让它去进行学习，然后做一个预测，这样的套路

			（3）基于关联规则的协同过滤
				 //==================================== 
				 //==================================== 
				 用 "关联算法" 做做协同过滤 //哪些商品同时出现，酱油和醋
					Apriori	//比较出名，沃尔玛超市，当时聘请了IBM 作为商业顾问，
							//通过所有用户在POS机上面的购物小票，他们找到了有两个风马牛不相及的商品
							//经常会被一起购买：啤酒 和 尿布
							//弊端：多次遍历数据库

					FPGROWTH
							//对 Apriori 的升级版，它只需要遍历数据库两次，就能得到想到的结果。、
							//效率有所提升，它通过树形结构来保存商品
				


			//==================================== 协同过滤 的特点
			//==================================== 协同过滤 的特点
			（1）实现快，基于各种框架
			（2）对商品和用户没有要求
			（3）效果有保证，用20%的精力，保证它80%的效果

			//====================================  并不是所有商品都能使用 "协同过滤"
			//====================================  并不是所有商品都能使用 "协同过滤"
			（1）冷启动
					//必须要先有数据，没有数据时无法做协同过滤
			（2）马太效应
					//强者更强，弱者更弱，爆款商品会形成良性循环
					//基于内容：给商品打标签
			（3）推荐解释模糊
					//基于用户解释模糊。有时候推荐解释不通
			//==================================== 实现
			//==================================== 实现

			scikit-learn





"基于内容"的推荐算法
			//保健品、母婴分为一类


"混合推荐"算法

"流行度" 推荐算法

//这些算法 分支会有小的不同的种类
//它涵盖市面95%的推荐算法



//==========================================================
//==========================================================

算法属性：协同过滤、基于内容、混合推荐、流行度

数据属性：人口属性、地理属性、资产属性、兴趣属性

//============
//============
"算法" 一定是由 "数据" 产生的，什么样的数据产生 "什么样的算法"，

		如：
			在 "地理属性" 做 基于内容 的推荐
			在 "人口属性" 做 协同过滤 的推荐
			在 "资产属性" 做 混合推荐 的推荐
			在 "兴趣属性" 做 流行度    的推荐

		//但这些也不是绝对的，要看具体的业务场景

//==========================================================
//==========================================================
为 "推荐系统" 选择正确的 "推荐算法" 非常重要。


"推荐系统" 组成：
				推荐引擎	//后端程序当中，通过代码收集用户的一些数据
				推荐算法	//收集到的数据配合用户的推荐算法，能得到 "要给用户推荐的内容"
				推荐环境


在实践中，你可能会测试好几种算法，以发现哪款 一种最适合你的用户。


//==========================================================
//==========================================================


