
//======================================= 什么是模型部署
//======================================= 什么是模型部署
对于 深度学习而言，"训练" 和 "推理"是两个不同的行为。
	将新的数据输入训练得到模型，得到输出结果。就是预测或推理。
	
	//================================
	//================================
	但是推荐过程 和训练过程可能完全不一样的硬件环境，
	当然也对应不一样的计算性能要求。


//======================================= 在项目中，需要模型部署到环境中
//======================================= 在项目中，需要模型部署到环境中

部署到：
	（1）  "服务器" 上面部署：
	（2）  "嵌入式设备" 上面
			//无人机
			//智能门禁机
			//边缘机
			//单片机
			//工厂里面的机械臂
			//等等设备上面

		这个过程就要推理。

//======================================= 部署分类 
//======================================= 部署分类 
（1）服务器部署		//客户端调用	
		OS: Linux			

（2）客户端部署		//本机调用
		OS: Android、Apple OS

（3）嵌入式部署		//本机调用
		OS: Linux


//=======================================
//=======================================
硬件是以cpu为中心，软件以操作系统为中心
在部署时要看：
		（1）哪一个系统的CPU
		（2）它是哪一个指令集
		（3）操作系统是哪一个
//=======================================
//=======================================
Tensorflow 
		（1）Tensorflow		 训练、推理、服务器部署
		（2）Tensorflow lite  移动端，嵌入式部署，压缩、//拆剪体积会小很多
							  //把训练出来的模型转换成其它的适用于不同平台的、如安卓、IOS等等。

PaddlePaddle
		（1）Paddle Inference	训练、推理 
							//就是示例代码中的那种方式
		（2）Paddle Server		模型服务器一键部署工具
							//在某个机器上面启动一个服务，进行部署
		（3）Paddle Lite		移动端、嵌入式部署 		//拆剪体积会小很多
							//

Pytorch	
		onnxsim + NCNN前向神经网络框架			//移动端、嵌入式

//======================================= 过程
//======================================= 过程

（1）下载模型：
	zip -r model_freeze.zip model_freeze

（2）下载模型：


//======================================= 服务端工作流程
//======================================= 服务端工作流程
（1）服务端
		（1）启动服务器
		（2）加载模型
		（3）服务监听
		（4）解析数据
		（5）执行推理（预测）
		（6）返回响应
（2）客户端
		（1）发起请求
		（2）接收响应

//======================================= 模型量化
//======================================= 模型量化

模型量化 也是对模型压缩优化


//=======================================
//=======================================

	（1）model_freeze 里面是推荐的模型

	（1）model是增量训练模型 里面是推荐的模型

			/* 下的文件说明： 
				每一层会存一套权重和偏执
				//===================三个卷积
				conv2d_0.b_0
				conv2d_0.w_0

				conv2d_1.b_0
				conv2d_1.w_0

				conv2d_2.b_0
				conv2d_2.w_0
				//===================两个全连接			
				fc_0.b_0
				fc_0.w_0

				fc_1.b_0
				fc_1.w_0

				__model__
			*/
			/*
				它里面是二进制数据:
				可以通过特殊的方式打开它，并拿到里面的参数。
				并进行修改，这个叫迁移学习，
				其它模型训练好的参数放到我自己的模型里面。
				
			*/
