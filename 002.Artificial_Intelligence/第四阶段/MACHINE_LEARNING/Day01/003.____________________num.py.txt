//================================================================== numpy 是多维数组 + 数值计算
//================================================================== numpy 是多维数组 + 数值计算

（1）代码简洁：减少Python代码中的循环，
			//"数组当中有一个广播机制"

			//求平均值：mean
			//标准差: std
			//行转列： .T



（2）底层实现：厚内核(C) + 薄接口(Python)，保证性能。

			//C语言的特点是效率高：
			//Python语言特点是用着简单


//================================================================== numpy基础
//================================================================== numpy基础
//============================ndarray 数组//指多维数组
//============================ndarray 数组//指多维数组

	内存中的ndarray对象
		（1）元数据metadata，
			  存储对 "目标数组" 的  "描述信息" 
			  如：
				  ndim 			    /**  几维  ：一维数组、二维数组。
										 一维[100 200 300 400]
										 二维[[100] [200] [300] [400]]
										 如：dim为2
										 如：dim为1
									*/

				  shape				/**  形状，记录数据排列形状，几行几列。
										 它返回一个元组。
										 如:(2,2)表示2行2列
										 如:(1,4)表示1行4列
										 如:(4,1)表示4行1列
										 如:(4,)一维时，		
									*/

				  dtype				/**
									    data type元素类型，每个元素的数据类型
										如：int32，用32位二进制表示一个整数。
										int8 = 2的8次方，最多256。 //占一个字节

										int32 =占4个字节。此时每个元素都会占4个字节。

									*/

				  data			//实际数据在
				  等等。
		（2）实际数据
				将实际数据与元数据分开存放，
				一方面提高了内存空间的使用效率，
				另一方面减少了对实际数据的访问频率，提高性能。
				//如：将一个一维数据修改为2维数组，只需要修改元数据即可

//============================ ndarray 数组对象的特点
//============================ ndarray 数组对象的特点

（1）Numpy数组是同质数组，即所有元素的数据类型必须相同
（2）Numpy数组的下标从0开始，最后一个元素的下标为数组长度 -1（也就是反向索引）


//============================ 列表和数组对比
//============================ 列表和数组对比
如果要找到一个元素：
	（1）列表需要先，找到下标，再找到它的地址，再拿到值。
	（2）数组，由于它是同质数组，每个元素占字节相同，可以通过计算直接找到它的地址。


