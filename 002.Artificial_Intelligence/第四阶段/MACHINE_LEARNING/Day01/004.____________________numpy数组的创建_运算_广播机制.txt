
//=============================================================================== ndarray数组的创建
//=============================================================================== ndarray数组的创建

（1）np.array 任何可被解释为Numpy数组的逻辑结构
				//有点像 list() ，将其它元素类型转换成列表
				//np.array() 就是将其它的元素类型转成数组
				//所以它是一个数组生成函数
		//======================将列表转换成数组
		import numpy as np
		a = np.array([1, 2, 3, 4, 5, 6])
		print(a)


//========================================== 数组 与 值 进行计算
//========================================== 数组 与 值 进行计算

（1） * 2
		列表 * 2 ，重复生成列表中的元素
		数组 * 2 ，数组里面的 "每个元素" 都会 * 2 ，它会减少python代码中的循环
				   这也就是数组中的 "广播机制"			

（2） 等于比较
		列表 == 3 ，比较列表是否相同
		数组 == 3 ，比较里面的每个元素是否为3
					//也利用了广播机制
	/**
		广播机制的原理:
			当数组*2的时候，
			如 [1 2 3 4 5 6 ]
			它会对2进制一个升维[2 2 2 2 2 2]
			然后每个元素乘以对应位置的值，
			这也就减少了循环
	*/
	/**
		什么时候进行 "升维"
			当 “数组” 与 “数值” 进行计算的时候， //如：乘法、比较相等
			它其实是 数组每个元素 都 与数值进行计算
	*/
//========================================== 数组 与 数组 进行计算
//========================================== 数组 与 数组 进行计算


（3） 数组与数组相加  对应位置进行相加
		print(lis + lis) #两个列表拼在一起
		print(ary + ary) #对应位置进行相加

（4） 数组与数组相乘  对应位置进行相加
		# print(lis * lis) #两个列表拼在一起
		print(ary * ary) #对应位置进行相加

	/**
		数组 与 数组 进行计算，是对应位置进行计算
		
		注意：数组元素个数必须相同
	*/

//=============================================================================== 创建一系统数据构成的数组 arange
//=============================================================================== 创建一系统数据构成的数组 arange


arange 比python中的range函数功能更强

		python中的range函数只能生成一系列的可迭代的整数对象。
		而np中的 arange 是可以生成浮点数的。


（2）np.arange(起始值(0),终止值，步长(1))
		//======================
		import numpy as np
		a = np.arange(0, 5, 1)
		print(a)
		b = np.arange(0, 10, 2)
		print(b)


		ary = np.arange(0.1, 1.2, 0.1)
		print(ary)

//=============================================================================== 生成特殊数组 np.zeros
//=============================================================================== 生成特殊数组 np.zeros
生成值全为0的数组


np.zeros(数组元素个数，dtype='类型')
		//dtype是指0的元素类型，默认是float64
		//int32



print("==" * 20)
arr = np.zeros(10)  # 生成值全部是0的数组,dtype是指0的元素类型，默认是float64
print(arr)

print("==" * 20)
arr = np.zeros(10, dtype='int32')  # shape为10，所以是一个一维数组
print(arr)

print("==" * 20)
arr = np.zeros(shape=(3, 2), dtype='int32')  # 二维数组，3行2列，3表示二维数组中有几个一维数组，2表示一组数组中有几个元素
print(arr)  # 最左边有几个方括号，就代表是几维数据

print("==" * 20)
arr = np.zeros(shape=(5, 4, 9), dtype='int32')  # 三维数组，5表示三维数组中有几个二维数组，4表示二组数组中有一维数组，9表示一维数组中有几个元素
print(arr)      #三维数组，叫法，5页4行9列


//=============================================================================== 生成特殊数组 np.ones
//=============================================================================== 生成特殊数组 np.ones
生成值全为1的数组
one = np.ones(shape=(3, 2), dtype='int32')
print(one) #生成值全是1的数组，和zero的区别就是值全是1

//=============================================================================== zeros_like 和 ones_like
//=============================================================================== zeros_like 和 ones_like
由 zeros 和 ones 衍生出来的
zeros_like 和 ones_like

like就是拿到  "其它某个数组" 的 "元数据"，
然后
zeros_like，就是把数据全部变成0
ones_like，就是把数据全部变成1


//=============================================================================== 创建值全部为0.2的数组
//=============================================================================== 创建值全部为0.2的数组

生成一个一维数组有10个元素，每个元素的值为0.2
利用广播机制去做，
生成10个1，然后除以5，就可以了


