
//================================== 掩码操作：用数组索引数组
//================================== 掩码操作：用数组索引数组


import numpy as np


# 创建一个数组
a = np.arange(1, 10)


# 创建一个列表（或数组）
mask = [True, False, True, False, True, False, True, False, True]
# 用数组索引一个 "列表"，正常情况是一个索引值，一个切片
print[a[mask]]

#mask里面放的是布尔值，True表示想要的内容，False表示不想要的内容
#用 "数组" 索引 "数组"，相当于用 "布尔数组" 去 "遮掩" 原始的数据，
为Ture的脚标得到的新数组就是我们想要的数据。

//================================== ：通过掩码操作拿到所有符合条件的数据
//================================== ：通过掩码操作拿到所有符合条件的数据

它还是索引机制，只是索引的内容不一样


//================================== 分类
//================================== 分类

（1）布尔掩码
			（1）mask里面是 布尔值
			（2）掩码里面元素个数和原数组元素个数要相同
（2）索引掩码
			mask里面是索引值，
			//个数可以不一致，且可以重复
			



//================================== 练习题1：求100以内3的倍数
//================================== 练习题1：求100以内3的倍数
print("==" * 20)
################################## 求100以内3的倍数
ary = np.arange(1, 101)
# print(ary % 3 )#利用广播机器求余数，形成的结果，依然是一个数组
# print(ary % 3  == 0) #再判断等于0，形成的结果，依然是一个数组
print(ary[ary % 3  == 0]) #依然是一个数组




//================================== 练习题2：求100以内能被3 和7同时整除的数
//================================== 练习题2：求100以内能被3 和7同时整除的数
################################## 求100以内能被3 和7同时整除的数
print("==" * 20)
ary = np.arange(1, 101)
print(ary[(ary % 3 == 0) & (ary % 7 == 0)])


################################## 求100以内能被3 和7同时整除的数，解法2
print("==" * 20)
ary = np.arange(1, 101)
print(ary[(ary % (21) == 0)])

/**
	numpy里面不支持and操作，支持：& | ~
*/


//================================== 练习题3：将分数表中及格和不及格分别用 修改为1 和0 （二值化）（通过掩码操作）
//================================== 练习题3：将分数表中及格和不及格分别用 修改为1 和0 （二值化）（通过掩码操作）



将分数表中及格和不及格分别用 修改为1 和0


##################################  将分数表中及格和不及格分别 修改为1 和0
score = np.array([[100.0, 99.0, 66.6],
                 [56.8, 92.1, 18.3],
                 [45.6, 78.9, 34.5]])
score[score < 60] = 0
score[score > 60] = 1
print(score)

