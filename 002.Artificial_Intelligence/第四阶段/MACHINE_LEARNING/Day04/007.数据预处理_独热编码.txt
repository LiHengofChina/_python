
 
	（5）独热编码 //可逆转换
			 //想让数据可逆，不丢失信息细节，这里就可以使用 "独热编码"
			 //========================================== 使用场景
			 //========================================== 使用场景
			 （1）数据是离散值，才能去做。
						//不是离散值，那位数就是无限的了。//就会产生维度灾难
						//连续数据理论可以傅，但是效率不好
			 （2）稀疏矩阵
			 //==========================================
			 /**
				从名字可以看出它是一个编码：
						就是多个0或1组成的数据，来代表它真实的数据。
			 */

			 //==========================================
			 说 "特征" 就是以列为 "单位"
			 //==========================================
			 根据 "一个特征中" 的 "值的个数" //（这些值是离散值）（不重复值的个数）
											 // 指离散值的个数
			 来建立 "一个由1和若干0" 组成的序列，
			 用来 "序列（动词）" 对 "所有的特征" 值进行编码，

			 //==================
			 例如有如下样本：
				[1 3 2 ]
				[7 5 4 ]
				[1 8 6 ]
				[7 3 9 ]
			第一列：有两个值，1使用10编码，7使用01编码
			第二列：有三个值，3使用100编码，5使用010编码，8使用001编码
			第三列：有四个值，2使用1000编码，4使用0100编码， 6 使用0010编码，9 使用0001编码
				/**
					有几种值，就使用几位长度，其中只有一个1，若干0
				*/
			编码字段，根据特征值的个数来进行编码，通过位置加以区分，通过独热编码后的结果为：
				[10 100 1000]
				[01 010 0100]
				[10 001 0010]
				[01 100 0001]
				//这样做之后，信息没有丢失，且全部是1和0

				//注意：显示效果是这样的
				[[1 0 1 0 0 1 0 0 0]
				 [0 1 0 1 0 0 1 0 0]
				 [1 0 0 0 1 0 0 1 0]
				 [0 1 1 0 0 0 0 0 1]]
				 

			//========================================== 接口
			//========================================== 接口
			one_hot_encoder = sp.OneHotEncoder(
				sparse=FALSE,  #是否采用"稀疏格式"，节约内存，只保存1的位置。 #默认True
				dtype="int32", #默认float64
				categories="auto" #自动编码  #默认 auto   #到底是1转成10，还是7转成10由它决定。
															
			)

			oh_samples = one_hot_encoder.fit_transform(raw_samples) # 编码   #训练并转换
			print(oh_samples)

			print(one_hot_encoder.inverse_transform(oh_samples))#解码#编码器和解码器，必须是同一个
			//==========================================
			//==========================================
				  #稀疏矩阵，只记录是1的位置 ，不记录0的位置。
				  /** 如
						(0, 0)	1
						(0, 2)	1
						(0, 5)	1
						(1, 1)	1
						(1, 3)	1
						(1, 6)	1
						(2, 0)	1
						(2, 4)	1
						(2, 7)	1
						(3, 1)	1
						(3, 2)	1
						(3, 8)	1
				  */
				one_hot_encoder = sp.OneHotEncoder()
				res = encoder.fit_transform(raw_samples) #执行独热编码
				res.toarray()
				如果返回的是：稀疏矩阵，可以通过res.toarray()转换成数组。
			//==========================================
			//==========================================
 