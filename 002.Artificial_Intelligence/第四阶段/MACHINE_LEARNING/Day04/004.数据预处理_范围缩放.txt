 

	（2）范围缩放
		 将每一列的 "最小值" 和 "最大值" 设定为  "相同的区间"
		 最小值一般设置为0，最大值设置为1。
		 中间值 "同比利" 缩放
		 //将  "每列的值" 处理成 "相同的数值范围"
		 //常用区间 "0~1" 
			/**
			17
			20
			23

				具体做法：
						（1）每一个值都减去最小值
							17	- 17	= 0
							20	- 17	= 3
							23	- 17	= 6
						（2）然后再除以 "列的极差"//np.ptp() 最大值减最小值就是极差。
							17	- 17	= 0
							20	- 17	= 3
							23	- 17	= 6
			*/



			/**
				 "范围缩放"  和 "均值移除" 他们的 "应用场景" 是相同 的，

				 范围缩放 也是用来处理  "列与与差距过大" 的情况
				 只不过 "范围缩放" 的处理方式不一样
			*/
 
 			//============================================
			//============================================
			同样可以使用 sklearn 框架来实现这个功能
			mms = sp.MinMaxScaler(feature_range=(0,1)) 
							#定义 "范围缩放器对象"
							#feature_range=(0,1) 意思是 最小值0，最大值为1

			mms_sampeles = mms.fit_transform(raw_samples)#缩放
								/***
									fit_transform 本质是2个操作
									fit 适配 、匹配、训练
									transform 转换
									
									相当于:
										mms.fit(raw_sample)
										res = mms.transform(raw_sample)
										它们两个参数一样，所以把它合并到一起了

									但是某些场景必须分开写

								*/

			print(mms_sampeles)

			//============================================
			//============================================


//=================================================================== 上面两个统称
//=================================================================== 上面两个统称
/**
"范围缩放" 的 "均值移除" 统称为  "特征归一化"
		（1）线性函数归一化（范围缩放）
		（2）零均值归一化（均值移除）
*/



//========== 这两个都处理列与列的
//========== 这两个都处理列与列的
（1） 标准化、零均值归一化（均值移除）
	  让样本矩阵中的  " 每一列的平均值为0" ， "标准差为1" ，
		标准化值= (当前值−均值)/标准差
	  //主要用于那些特征的分布接近正态分布，或者我们希望将它们转换为正态分布的情况。


（2） 这种算法叫：线性函数归一化（范围缩放），处理  "列与与差距过大" 的情况
	  将每一列的 "最小值" 和 "最大值" 设定为  "相同的区间"
	  最小值一般设置为0，最大值设置为1。
	  中间值 "同比利" 缩放
		归一化后的特征值 = （当前值 - 最小值）/ （最大值 - 最小值）
		
	  //这种方法尤其适用于那些特征的分布不是正态分布的情况，或者最大和最小值的差异非常大的情况。
	  
	  


 