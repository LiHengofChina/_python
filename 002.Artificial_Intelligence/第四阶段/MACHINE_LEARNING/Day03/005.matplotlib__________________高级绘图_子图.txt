
//=============================================== 子图
//=============================================== 子图

（1） 在一个窗口里面画多张图表

//====================== 子图布局
//====================== 子图布局

（1）矩阵式布局		//常用
		所有的图：都是规则的，大小一样
		窗口被 均匀拆分
		每个子图，有一个自己的编号
		从左到右，从上到下，从1开始
		//==========================创建子图布局（拿到指定位置子图）
		//==========================创建子图布局（拿到指定位置子图）

		plt.subplot(rows,cols,num)  //行、列、子图数量
		plt.subplot(3,3,5)  //行、列、子图编号，第三行，第3列的，第3张子图
		plt.subplot(335)    //简写，不建议
		//====================== 在子图中写文字
		//====================== 在子图中写文字

		plt.text(x,y,s)
		plt.text(0.5, 0.5, 5, fontsize=24, ha='center', va='center')
			//使用场景也还是比较多和
			#0.5, 0.5在子窗口中的x坐标和y坐标

		//====================== 示例1
		ha='center', va='center'
		//====================== 示例2
		ha='center', va='bottom'


（2）网格式布局
		在网格式布局之上去做的。
		它 "支持相邻单元格" 合并

		//（1）
		gs = mg.GridSpec(3,3) #创建网格对象
		//（2）
		plt.subplot(gs[,:2])      //subplot是用来定位的
								  //gs[0,:2] 表示：
								  //把  “第0行” 和  “第0和1列” 合并到一起

		//（3）//
		plt.text(0.5, 0.5, '1', ha='center', va='center',size=36)



（3）自由式布局
		//（它所需要的数据和人脸识别的数据有点类似）
		// 
		//自由：想在哪里构建坐标系，就在哪里构建

		//能自己设定左下角顶点坐标


		plt.axes(
					[
						x, 		//左下角x轴
						y,		//左下角y轴
						width,	//宽度
						height, //高度
					]
				)
		/**
			这个和人脸识别 人脸检测很像。
			小区的人脸识别，当你走到机器前面，这个摄像头就会亮起来，
			呈现你这张"人脸"，它会有一个绿色的小框把 "人脸" 圈起来

			人脸 检测，检测的就是这个位置 ，而这个位置就是 “矩形的坐标”
			这个矩形可以包括整个人脸。

			我们一般只需要找到矩形左上角的顶点，
			再找到宽和高，就能找到这个矩形

			区别是  “人脸检查” 要的是左上角，
			自由式布局要的是 左下角


		*/






//=============================================== 练习
//=============================================== 练习



