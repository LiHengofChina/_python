

在 Python 3.7 以前，字典对象是无序的。
这意味着你不能依赖字典元素的插入顺序。


//=============================================
//=============================================

然而，从 Python 3.7 开始，"字典的实现" 发生了变化，
"插入顺序" 得到了保留，使字典变得"有序"。
这在 Python 3.7 的文档中被提到，
并且在 Python 3.8+ 中成为了 "语言的正式规范" 。

//=============================================
//=============================================

这意味着在 Python 3.7+ 中，当你向 "字典添加元素" 时，
元素将按照它们被添加到字典中的顺序进行存储和迭代。

d = {}
d['a'] = 1
d['b'] = 2
d['c'] = 3
print(list(d.keys()))  # 输出 ['a', 'b', 'c']



//=============================================
//=============================================

但请注意，即使在 Python 3.7+ 中，如果你对字典进行操作，
比如删除和重新插入一个键，该键会被移到字典的末尾：

d = {'a': 1, 'b': 2, 'c': 3}
del d['a']
d['a'] = 1
print(list(d.keys()))  # 输出 ['b', 'c', 'a']

//=============================================
//=============================================

总之，虽然 "现代的 Python 字典" 会保留 "元素的插入顺序"，
但仍然不建议 "依赖这个特性" 来编写 "需要元素顺序的代码"。
对于这种需求，更合适的数据结构是 "collections.OrderedDict"，
这是一个确保元素顺序的字典子类。





