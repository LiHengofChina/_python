

//====================================================================
//协程 和 线程有什么区别
//====================================================================


协程和线程是两种不同的 "并发执行机制"，



（1）实现级别：
	 线程： "线程" 是由 "操作系统管理" 的 "并发执行实体"。
			"操作系统" 可以在 "不同的线程之间" 切换，
			"每个线程" 都有 "自己的堆栈" 、"寄存器" 和 "局部存储"。
			因为 "线程切换" 需要涉及到 "操作系统的介入"，
			这也使得 "线程切换" 有 "一定的开销"。

	 协程： "协程" 是 "用户级的"、"轻量级的" 并发结构，
		    它完全在 "应用程序" 中实现，不需要操作系统的介入。
		    协程可以看作是 "运行在单个线程" 中的 "独立任务" ，
		    "它们之间的切换" 只涉及  "简单的堆栈" 和 "寄存器变化"，
		    开销 "远小于线程切换"。

（2）每个线程都有自己的固定大小的堆栈。
			线程：协程使用动态分配的堆栈，可以根据需要增长或缩小。   
			协程：协程使用动态分配的堆栈，可以根据需要增长或缩小。

（3）切换开销：
			线程：线程切换涉及到操作系统，因此相对较慢。
			协程：协程的切换是由程序控制的，开销远小于线程切换。

（4）控制方式：
			线程："线程的调度" 和 "管理" 通常是由 "操作系统自动完成" 的，
				  线程之间的切换是不可预测的。

			协程："协程的调度" 是由 "程序员" 或 "库" 显式控制的，
				  这意味着可以 "精确地控制" 何时进行 "协程之间的切换"。

（5）同步和通信：
			线程：由于 "多个线程" 可能共享 "同一块内存"，
				  因此需要用 "互斥锁"、"信号量" 等机制来保证 "线程安全"。

			协程：在 "传统的协程模型" 中，由于 "协程是协作式" 的，并不 "真正并行"，
				  所以它们不需要像线程那样的同步机制。
				  但如果 "在多线程中使用协程" ，可能 "仍然需要同步" 。


（6）并发与并行：
			线程：在多核CPU上，线程可以实现真正的 "并行执行"。
			协程：协程在 "单个线程上" 是 "并发的" ，但不是 "并行的"。
				  但是，可以在 "多个线程" 或 "进程" 中使用 "多个协程来实现并行"。

总之，"协程和线程" 都是为了实现 "程序的并发执行"，
但它们的 "工作方式"、 "开销" 和 "使用场景" 都有所不同。
选择使用 "哪种机制" 取决于 "具体的应用需求和性能考虑"。





