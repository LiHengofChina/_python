

//====================================================================
//协程 和 线程有什么区别
//====================================================================


 协程和线程是两种不同的并发执行机制，


（1）实现级别：
	 线程： 线程是由操作系统管理的并发执行实体。
			操作系统可以在不同的线程之间切换，
			每个线程都有自己的堆栈、寄存器和局部存储。
			因为线程切换需要涉及到操作系统的介入，
			这也使得线程切换有一定的开销。

	 协程：协程是用户级的、轻量级的并发结构，
		   它完全在应用程序中实现，不需要操作系统的介入。
		   协程可以看作是运行在单个线程中的独立任务，
		   它们之间的切换只涉及简单的堆栈和寄存器变化，
		   开销远小于线程切换。
（2）每个线程都有自己的固定大小的堆栈。
			线程：协程使用动态分配的堆栈，可以根据需要增长或缩小。   
			协程：协程使用动态分配的堆栈，可以根据需要增长或缩小。
（3）切换开销：
			线程：线程切换涉及到操作系统，因此相对较慢。
			协程：协程的切换是由程序控制的，开销远小于线程切换。
（4）控制方式：
			线程：线程的调度和管理通常是由操作系统自动完成的，线程之间的切换是不可预测的。
			协程：协程的调度是由程序员或库显式控制的，这意味着可以精确地控制何时进行协程之间的切换。

（5）同步和通信：	
			线程：由于多个线程可能共享同一块内存，因此需要用互斥锁、
					信号量等机制来保证线程安全。
			协程：在传统的协程模型中，由于协程是协作式的，
					并不真正并行，所以它们不需要像线程那样的同步机制。
					//但如果在多线程中使用协程，可能仍然需要同步。		
（5）并发与并行：
			线程：在多核CPU上，线程可以实现真正的并行执行。
			协程：协程在单个线程上是并发的，但不是并行的。
				  但是，可以在多个线程或进程中使用多个协程来实现并行。

总之，协程和线程都是为了实现程序的并发执行，
但它们的工作方式、开销和使用场景都有所不同。
选择使用哪种机制取决于具体的应用需求和性能考虑。



