
Python中的async和await关键字是在Python 3.5中引入的

它们为 "异步编程" 提供了 "原生支持"。
这允许开发人员编写可以处理大量I/O操作（如文件读取、网络请求等）的代码，
而不会阻塞主线程。

使用这种方法，程序可以在等待 "某个长时间运行的操作" 完成时 "执行其他任务"。


//========================================= async 函数:
//========================================= async 函数:

（1）使用async关键字定义的函数称为"异步函数"。
（2）异步函数不返回 "常规的值" ，而是返回一个 _asyncio.Future 对象。
						//是说 "异步函数" 它执行之后返回 _asyncio.Future ,
						// _asyncio.Future 有一个子类是 _asyncio.Task
	/**
		async def my_async_function():
			return "Hello from async function!"
	*/


//========================================= await 关键字:
//========================================= await 关键字:

（1）你不能在普通的函数中使用await，只有在async函数中才可以。
	 await关键字用于"等待"一个异步操作的完成。
	 它只能在async函数内部使用。

（2）当你在异步函数中使用await时，该函数会暂停，
	 允许其他任务执行，直到await的操作完成。

	/**
		async def fetch_data():
			# ... some asynchronous operations ...
			data = await some_async_api_call()
			return data
	*/
//========================================= 执行async函数:
//========================================= 执行async函数:
（1）不能像普通函数那样直接调用async函数。

（2）通常，你需要使用 "事件循环" 来执行它。
	 在Python中，"asyncio模块" 提供了这样的 "事件循环"。
	/**
		import asyncio
		asyncio.run(my_async_function())
	*/
	
	
	
//========================================= asyncio
//========================================= asyncio

除了基本的async和await之外，asyncio库还提供了很多其他的功能，
如任务、锁和信号量、队列、时间处理等。
这些特性使得 "构建复杂的异步应用" 变得 "更加简单"。


//========================================= 其它
//========================================= 其它
 
虽然asyncio是Python的内置异步框架，
但还有其他一些第三方库（如Trio和Curio）也提供了异步功能。



//=========================================
//=========================================
asyncio.run()函数并不开启新的线程。
相反，它在当前线程上运行一个新的事件循环，
直到传入的协程my_async_function()完成执行。

asyncio是Python中的一个异步I/O框架，
它使用协程（通过async/await语法）来支持并发执行，
而不是传统的多线程或多进程方式。
这意味着asyncio允许在 "单个线程" 中 "同时运行多个协程"，
而不会阻塞整个线程。

//=========================================
//=========================================
这种并发执行是基于 "事件循环" 的，
当一个协程在等待I/O操作（如网络请求、文件读写等）时，
事件循环可以切换到另一个协程并继续执行，
从而实现非阻塞的并发执行。

所以，当你调用asyncio.run(my_async_function())时，
你只是在当前线程上启动了一个事件循环来运行协程，
并没有创建新的线程。