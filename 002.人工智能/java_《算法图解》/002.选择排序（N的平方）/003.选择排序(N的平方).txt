
//=========================================== 前提知识


数组、链表、大 O 表示法


//=========================================== 场景：


假设你的计算机存储了很多乐曲。

		对于每个乐队，你都记录了其作品 "被播放的次数" 。

		将 "乐队的乐曲" 的播放次数 "从多到少" 的顺序排列


（1）.  一种办法是遍历这个列表，找出作品播放次数最多的乐队，并将该乐队添加到一个新列表中。
		再次这样做，找出播放次数第二多的乐队。


		//分析它需要多少时间：
		O(n) 时间意味着查看列表中的每个元素一次。


		//
		例如，对乐队列表进行简单查找时，意味着 "每个乐队" 都要查看一次。
		
		
		要找出播放次数最多的乐队，必须检查列表中的每个元素。正如你刚才看到的，
		这需要的时间为 O(n)。因此对于这种时间为 O(n) 的操作，你需要执行 n 次。
		
		//====================================
		随着排序的进行，每次需要检查的元素数在 "逐渐减少" ，
		最后一次 "需要检查的元素" 都只有一个。
		
		第一次需要检查 n 个元素，
		随后检查的元素数依次为 n-1 、n-2 、

		平均每次检查的元素数为 1/2  * n 
		
		因此运行时间为  TO( n * 1/2 * n)
		
		大 O 表示法省略诸如 1/2 这样的常数
					//意思是直接去掉
		因此简单地写作 O(n*n) 或 O(n^2) 
			
	



