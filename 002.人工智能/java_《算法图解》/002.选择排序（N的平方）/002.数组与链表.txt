
//======================================================
//======================================================
	有时候，需要在内存中存储一系列元素。
	假设你要编写一个管理待办事项的应用程序，
	为此需要将这些待办事项存储在内存中。


//======================================= 数组
//======================================= 数组
	使用数组意味着所有待办事项在内存中都是相连的（紧靠在一起的）。
		
		
		（1）. 当添加新元素时，如果空间不够，就需要申请新的空间，把原来的数据移动过去。
				//有连接的空间则可以直接添加
		（2）. 如果通过 "预留座位" 来解决？
				// 1. 你额外请求的位置可能根本用不上，这将浪费内存
				// 2. 超过预留的位置，还是需要转移。
				// 

//======================================= 链表
//======================================= 链表
	链表的 "每个元素" 都存储了 "下一个元素的地址" ，从而使一系列 "随机的内存地址" 串在一起。
	
	如：电视上面显示 "十大电视反派" 时，
	不在一个页面中显示整个排行榜，
	而是先显示第十大反派（Newman）。
	你必须在每个页面中单击Next，
	才能显示下一个，然后再次点击，直到最后一个。
	
	链表的优势在插入元素方面


	需要同时读取所有元素时，链表的效率很高。





//================================ 实战场景
//================================ 实战场景

（1）. 插入多，读取少：*********链表

		//注意：	
			仅当你要 "随机访问" 元素时，链表的读取速度才慢。
			如果要读取所有元素，链表的速度也不慢

（2）. 在中间插入 *********链表
	  要根据新增待办事项的日期将其插入到正确的位置。

	  数组：必须 "将后面的元素" 向后移动，
			如果没有足够的空间，还得将整个数据复制到其它地方。


	  链表：
			只需 修改 它前面的那个元素指向的地址，
			然后自己再指向下一元素地址。

（3）. 删除

	  链表：只需修改前一个元素指向的地址即可。
	  数组：必须将后面的元素都向前移。
	
	  //不同于插入，删除元素总能成功
	  //如果内存中没有足够的空间，插入操作可能失败，
	  //但在任何情况下都能够将元素删除。
		
	  仅当能够立即访问要删除的元素时，
	  删除操作的运行时间才为_O_(1)。
	  //通常我们都记录了链表的第一个元素和最后一个元素，
	  //因此删除这些元素时运行时间为_O_(1)
	  
//======================================= 数组与链表比较
//======================================= 数组与链表比较

数组： 
		随机读取		O(1)
		插入			O(n)
		删除			O(n)
链表：
		随机读取		O(n)
		插入			O(1)
		删除			O(1)


//======================================= 数组和链表哪个用得更多呢？
//======================================= 数组和链表哪个用得更多呢？

	使用时要看情况。 但数组用得很多，因为它支持随机访问。


	随机访问 和 顺序访问。


	顺序访问意味着从第一个元素开始逐个地读取元素。
	
	
	链表只能顺序访问：要读取链表的第十个元素，
	得先读取前九个元素，并沿链接找到第十个元素。
	
	随机访问意味着可直接跳到第十个元素。
	本书经常说数组的读取速度更快，
	这是因为它们支持随机访问。
	很多情况都要求能够随机访问，
	因此数组用得很多。


	数组和链表还被用来实现其他数据结构，


//======================================= 实战场景2
//======================================= 实战场景2


（1）. 服务员在队尾添加点菜单，厨师取出队列开头的点菜单并制作菜肴。
	   //使用链表。经常要执行插入操作（服务员添加点菜单），而这正是链表擅长的。

（2）. Facebook 记录一系列用户名，每当有用户试图登录 Facebook 时，
	   都查找其用户名，如果找到就允许用户登录。
	   //需要执行大量的用户名查找操作。
	   //假设 Facebook 使用二分查找算法，
	   
	   //而 "这种算法" 要求 "能够随机访问" ——立即获取中间的用户名。**************************
	   
	   //有序数组。数组让你能够随机访问——立即获取数组中间的元素


（3）. 常有用户在 Facebook 注册。假设你已决定使用数组来存储用户名。
	   在插入方面数组有何缺点呢？具体地说，在数组中添加新用户将出现什么情况？
	   //数组的插入速度很慢
	   //另外，要使用二分查找算法来查找用户名，数组必须是有序的。

	   
（4）. 实际上，Facebook 存储用户信息时使用的既不是数组也不是链表。
	   假设 Facebook 使用的是一种混合数据：链表数组。

	   这个数组包含 "26 个元素" ，每个元素都指向一个链表。
	   
	   // 查找时，其速度比数组慢，但比链表快；
	   // 而插入时，其速度比数组快，但与链表相当



