


//=============================================
//=============================================


"广度优先搜索" 是一种用于图的查找算法，可帮助回答两类问题。

	第一类问题：从节点A出发，有前往B的路径吗？
	第二类问题：从节点A出发，前往B的哪条路径最短？


//======================
//======================
	前面计算从"双子峰前往金门大桥"的"最短路径"时，
	您就使用了广度优先搜索
	这个问题属于第二类问题：哪条路径最短？
 
	
	
	
//====================== 芒果销售
//====================== 芒果销售

	假设你经营着一个芒果农场，需要寻找芒果销售商，
	以便将芒果卖给他。
	这种查找很简单。首先，创建一个朋友名单。
	
	然后，依次检查名单中的每个人，看看他是否是芒果销售商。
	
	假设 "你没有朋友" 是芒果销售商，那么你就必须在 "朋友的朋友" 中查找。
	检查名单中的每个人时，你都将其朋友加入名单。
	
	这样一来，你不仅在朋友中查找，还在朋友的朋友中查找。
	
	/**
		别忘了，你的目标是在你的人际关系网中找到一位芒果销售商。
		因此，如果 Alice 不是芒果销售商，就将其朋友也加入到名单中。
		这意味着你将在她的朋友、朋友的朋友等中查找。
	
	*/
	
	使用这种算法将搜遍你的整个人际关系网，直到找到芒果销售商。
	这就是 "广度优先搜索" 算法。
	
	
//====================== 查找最短路径
//====================== 查找最短路径
	再说一次，广度优先搜索可回答两类问题。

		第一类问题：从节点A出发，有前往节点B的路径吗？
				   （在你的人际关系网中，有芒果销售商吗？）
		第二类问题：从节点A出发，前往节点B的哪条路径最短？
				   （哪个芒果销售商与你的关系最近？）
	//=================
	//=================
	尝试回答第二类问题——谁是关系最近的芒果销售商
	
	例如：朋友是一度关系，朋友的朋友是二度关系。
	一度关系胜过二度关系，二度关系胜过三度关系，以此类推。
	因此，你应先在一度关系中搜索，确定其中没有芒果销售商后，
	才在二度关系中搜索。
	
	/**
	广度优先搜索就是这样做的！
	在广度优先搜索的执行过程中，
	搜索范围从起点开始逐渐向外延伸，即先检查一度关系，
	再检查二度关系。
	顺便问一句：将先 检查Claire 还是Anuj 呢？
	Claire 是一度关系，而 Anuj 是二度关系，
	因此将先检查 Claire，后检查 Anuj。
	
	你也可以这样看，一度关系在二度关系之前加入查找名单。
	
	你按顺序依次检查名单中的每个人，
	看看他是否是芒果销售商。
	这将先在一度关系中查找，再在二度关系中查找，
	因此找到的是关系最近的芒果销售商。
	
	广度优先搜索不仅查找从 A 到 B 的路径，
	而且找到的是最短的路径。


	*/

	//=================

	注意，只有 "按添加顺序查找" 时，
	才能实现这样的目的。
	有一个可实现这种目的的数据结构，那就是 队列（queue）。
		//先入先出
	



