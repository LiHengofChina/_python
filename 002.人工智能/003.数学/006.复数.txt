
复数是由 "实数部分" 和 "虚数部分" 组成的数。
		虚数部分由一个实数乘以虚数单位（i或j）构成。
		在复数中，实数部分和虚数部分都可以是任意实数。

//============================================================================================
//============================================================================================
在Python中，
可以使用内置的complex类型来表示和操作复数。
complex类型使用a + bj或a + bi的形式表示复数，
其中a是实数部分，b是虚数部分。



# 创建复数
z = 3 + 4j
print(z)  # 输出: (3+4j)

# 获取实部和虚部
real_part = z.real
imaginary_part = z.imag
print(real_part)  # 输出: 3.0
print(imaginary_part)  # 输出: 4.0

# 进行复数运算
z1 = 2 + 3j
z2 = 1 - 2j

addition = z1 + z2
subtraction = z1 - z2
multiplication = z1 * z2
division = z1 / z2
print(addition)  # 输出: (3+1j)
print(subtraction)  # 输出: (1+5j)
print(multiplication)  # 输出: (8-1j)
print(division)  # 输出: (-0.2+1.4j)


通过使用complex类型，你可以创建复数对象并进行各种复数运算，如加法、减法、乘法和除法等。
同时，你也可以使用z.real和z.imag来获取复数的实部和虚部。

需要注意的是，在Python中，虚数单位用小写字母j表示，而不是大写字母i。



//============================================================================================ 复数的 乘法 和 除法（有点复杂，需要的时候再看）
//============================================================================================ 复数的 乘法 和 除法（有点复杂，需要的时候再看）

计算复数的乘法时，需要将每个复数的实部和虚部进行分别的运算，然后根据复数乘法的规则进行组合。

假设有两个复数 z1 和 z2：

z1 = a + bj
z2 = c + dj

其中，a 和 c 是 z1 和 z2 的实部，b 和 d 是 z1 和 z2 的虚部。

复数的乘法规则如下：

z1 * z2 = (a + bj) * (c + dj)
= (ac + adj + bcj + bd*(-1)) （根据虚数单位 i 的定义，ii = -1）
= (ac - bd) + (ad + b*c)j

因此，通过将实部和虚部分别相乘并相加，可以得到复数乘法的结果。

在示例代码中的乘法运算中：

z1 = 2 + 3j
z2 = 1 - 2j

根据上述规则：

z1 * z2 = (21 - 3(-2)) + (2*(-2) + 3*1)j
= 8 + (-1)j
= 8 - 1j

因此，乘法的结果是 8 - 1j。

