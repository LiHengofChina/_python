

//=======================================
//=======================================


布尔型					bool_     //和pyton里面的bool是一样的
						# bool_ bool  ?  这三种写法相同，?号是布尔类型的缩写


有符号整数型  			
						int8(-128-127)
						int16				256
						int32				65536
						int64				4294967296


无符号整数型	//只有正数，没有负数
						uint8(0~255)		256
						uint16				65536
						uint32				4294967296 //42亿
						uint64


浮点型
						float16		半精度half
						float32		单精度
						float64		双双精度


复数型	// 				1+1j ，1-1j，可以进行加、减、乘、除运算
						complex64	//8字节
						complex128	//16字节 默认


字符串					str_,每个字符用32位Unicode编码表示
						//_ 可加可不加下划线
						/**
							如：'zcm'  每个字符有4字节保存，所以 'zcm' 占用 12bytes
							
							print("==" * 20)
							ary = np.array(['zcm',  # 12 Bytes
											'qwer',  # 16 Bytes
											'zbcdefghi'  # 36 Bytes
											])
											#由于np里面的数组是同质数组，所以数组中的每个元素要以最多的长度为准，也就是每个元素都是36 Bytes
											#这里浪费空间，所以这里就是典型的  “拿空间” 换 “时间”，
											#类似字典，底层以Hash存储

							print(ary.dtype)
						*/


日期类型				datetime64
						//可以进行日期计算
						//日期转换，字符串转日期，日期转数值
						/**
						如果把数据代到公式里面去计算，拿结果
						那么就需要保证，数据是数值类型，
						所以要把日期转数值
						*/

						"2023-6-29日" 日期加载到内存当中，一定是字符串类型
						所以需要把  "时间类型的字符串" 转成  "日期类型datetime64"
						然后再转成数值类型，才能进行计算

						//注意：
								/**
									（1）年月日，只能使用-号来区分
									（2）1-9必须使用 01-09 来区分
								*/


//=======================================
//=======================================

		/**
			每种类型都有缩写
					布尔缩写 	?
					int32 	 	i4
					......
					str  缩定 	U		//U9表示它有9个字符，U10表示它有10个字符，每个字符占4字节
		*/




//===================================================================================== 类型字符码
//===================================================================================== 类型字符码
np.bool_  					?
np.int8/16/32/64			i1/i2/i4/i8
np.uint8/16/32/64			u1/u2/u4/u8
np.float8/16/32/64			f2/f4/f8
np.complex64/128			c8/c16
np.str_						U
np.datetime64				M8[Y] M8[M] M8[D]	 M8[h] M8[m] M8[s]

