

数组即有索引，又有切片


//======================================
//======================================


这里而的索引指的是切片，一次性拿到一部分数据


//====================================== 一维数组切片
//====================================== 一维数组切片

import numpy as np

a = np.arange(1,10)
print(a) # 1 2 3 4 5 6 7 8 9

#正向切面，从左往右切。
print(a[:3])  # 从0开始到3不包括3，就是[0] [1] [2] 脚标的值， 1 2 3
print(a[3:6]) # 从3到6不包括6，就是[3] [4] [5] 脚标的值，4 5 6
print(a[6:])  # 从6到结尾，就 [6] [7] [8] 脚标的值，7 8 9


#反向切面（由步长决定，步长为负数），从右往左切，
print(a[::-1])   	# 开始和结束都省略，且步长为负数 -1 ， 9 8 7 6 5 4 3 2 1  
print(a[:-4:-1]) 	# 从0开始（这里好像是-1 ）切到-4不包括-4 ，步长为-1，-4是反向索引 ，[-1][-2][-3] 也就是 9 8 7  
print(a[-4:-7:-1])  # 从 -4 开始 切到-7 不包括-7 ，步长为-1，[-4] [-5] [-6] 也就是 6 5 4
print(a[-7::-1]) 	# 从 -7 开始到最后，步长为-1，反向切，[-7] [-8] [-9] ，也就是 3 2 1 

print(a[::])		# 开始到结束， [0] [1] [2] [3] [4] [5] [6] [7] [8]的值，也就是1 2 3 4 5 6 7 8 9 
print(a[:])			# 开始到结束， [0] [1] [2] [3] [4] [5] [6] [7] [8]的值，也就是1 2 3 4 5 6 7 8 9 

print(a[::3])		# 开始到结束，步长3 [0] [3] [6] 的值，也就是1 4 7 
print(a[1::3])		# 从1到结束，步长3 [1] [4] [7] 的值，也就是2 5 8
print(a[2::3])		# 从2到结束，步长3 [2] [5] [8] 的值，也就是3 6 9 




//====================================== 多维数组切片
//====================================== 多维数组切片

[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]
 [26 27 28 29 30]
 [31 32 33 34 35]
 [36 37 38 39 40]
 [41 42 43 44 45]
 [46 47 48 49 50]]
 
场景：我要使用第0行的前2列



ary = np.arange(1, 51).reshape(10, 5)
print(ary)


print("==" * 20)
#第0行的前2列
print(ary[:1, :2])  #行和列都通过切片拿

print(ary[0][0:2])  #行是索引，列是切片，
print(ary[0, :2])   #行是索引，列是切片，

#数组：切片切出来的是2维的，索引拿到的都是1维的

#对于列表：切出来的都是列表
#切片，切出来的是当前元素的某一段，所以元素类型不会变，列表出来的是列表，字符串切出来的是字符串
#所以数组切出来的还是数组
#一维数组 切出来是一维数组
#二维数组 切出来是二维数组
#就是说切片是不会降维的

#而索引，通过索引拿到的是二维数组的第0行，而第0行是一个一维数组，再对它进行切片，它就会变成1维数组
#结论就是切片不会降维，而索引会降维

print(ary[0, 1])  # 0是拿到第一行，而1是它的第二个元素，从二维降到一维，再从一维降到元素，所以拿到的是字符串
print(ary.dtype)  # 0是拿到第一行，而1是它的第二个元素，从二维降到一维，再从一维降到元素，所以拿到的是int32型数字

#拿到结果可能一样，便是维度是不一样的，所以需要注意
#因为，有时候，我们对数据是有要求的，有时候，需要一维，有时候需要二维

