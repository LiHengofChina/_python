
//================================= 列表推导式与for循环
//================================= 列表推导式与for循环


列表推导式（List Comprehension）语法
	[expression for item in iterable]
	是一种简洁、高效的语法结构，用于生成  "新的列表"。

	//它与普通的 for 循环在功能上是等价的，但更加简洁、易读，并且在某些情况下可以提高代码的性能。

//=============== 详细说明
//=============== 详细说明


 列表推导式（List Comprehension）：

		new_list = [expression for item in iterable]
		//这是产生一个新的列表

		/**
			expression：用于计算新列表中的元素的表达式。
			item：用于遍历 iterable 中的每个元素。
			iterable：可迭代对象，可以是列表、元组、字符串、字典等。
		*/
		
//=============== 练习
//=============== 练习

假设我们有一个列表 numbers，我们想生成一个新列表，其中包含原列表中每个数的平方。		


（1）列表推导式 实现
		/**
			举例：

				numbers = [1, 2, 3, 4, 5]
				squares = [num ** 2 for num in numbers]
				print(squares)  # Output: [1, 4, 9, 16, 25]

		*/

（2）使用普通的 for 循环：实现	
		/**
				numbers = [1, 2, 3, 4, 5]
				squares = []
				for num in numbers:
					squares.append(num ** 2)
				print(squares)  # Output: [1, 4, 9, 16, 25]
		*/


两种方法都可以得到相同的结果，但列表推导式更简洁和易读。
在这个简单的例子中，性能差异不大，但对于大规模的数据集，列表推导式可能会更快。






