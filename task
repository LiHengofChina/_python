
//============================================ 详细设计
//============================================ 详细设计
 
	//============================= 当前
	//============================= 当前
	//===== 开始开发：
	//===== 开始开发：
	（1）参数配置管理 



	（2）注意分类  
		 （1）有些是审核规则
		 （2）有些是检测项
		       //要运行任务才能做出来的
				：记录数>1000W的表使用分区
		  （3）有些功能是静态实现，
			   有些功能是动态实现的。


	//=============================
	//=============================

		（1）吴生龙的规则拿过来
				（1）让AI去重复
				（2）让AI分组类
				（3）修正文档
				（4）有些是检查项，自动任务才能做的。
					 //加一个两个新的字段，
					 //就是标识这个规则是
							：自动任务 可用
					 		：工单上线 可用
				（5）





		 //明天来验证这个
		（1）自定义参数校验方式
			（1）自定义参数校验规则
			（2）换成 GET 和 UPDATE
			（3）注意，它已经有全局异步处理了

		（2）用postman调用下这两个接口
			 （1）检验下参数异常
			 （2）查询结果异常

		（3）集成 mybatis
			 //放在 infrastructure 层
			 
		（4）事务配置
		（4）分页查询

		（5）配置参数的缓存
			 //找一个简单的缓存jar包，这种，
			 //不要中间件这种来缓存数据

		（6）有些接口访问单个服务就好了
			 http://localhost:8082/api/v1/sqlaudit/users/1





	（2） 使用AI来重新分类一下，方便管理
			//把四种规则全部合进来，再分类 


	（2）规则引擎 和 SQL解析器
		 //放在领域层
		 Spring Drools
		 Apache Calcite

	（3）部署到一台服务器上面去
		 //通过网关调用接口



	（4）人工审核流程图
	（4）自动审核流程图
	（6）使用文档
	
	
	（7）分类里面加一个其它
			 //这样不确定都分在里面
	（6）在保存模板时，要检测，有些规则是冲突的。
		 这里看看有没有什么算法，巧妙设计
		 有些审核规则相互冲突的，不能同时生效，
		 所以它们要分开存放在不同的“审核模板”中


	（7）默认模板-梳理成脚本
	


//============================================ 考试准备
//============================================ 考试准备

（1）每晚学习

（2）产品设计：
		配合产品经理
（3）概要设计

//============================================ 技术准备
//============================================ 技术准备


//============================================ 开始开发
//============================================ 开始开发

（1）本地环境搭起来，使用一下现在的系统
（2）了解一下现有代码分布
	  //（测试）
	  //（开发）
	  //思考后面怎么集成
（3）前端不确定我做不做，
	 暂时没有权限
（4）创建新的微服务组件

（5）记录安装部署过程中需要的新组件





