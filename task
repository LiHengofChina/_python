
//========================================= 数据库连接测试接口
//========================================= 数据库连接测试接口




//========================================= 实现一个基础的规则审核 *4 
//========================================= 实现一个基础的规则审核 *4 


（4）提供一个审核的接口
		
		（1）参数
		（2）处理
				（1）同时实现四种数据库的规则
				
				（1）根据数据源查询 "规则模板"
					（1）解析SQL
					（1）校验SQL
					
			
同一条规则在不同数据库实现方式不同，
同一类型定义总的接口			
		
		（3）统一返回结果（重点）
	


（2）规则引擎 和 SQL解析器
	 //放在领域层
	 Spring Drools	
			//https://mp.weixin.qq.com/s/mkro_1bTGapsY6l0-4-E-Q
	 Apache Calcite




 

（1）注意分类  
	 （1）有些是审核规则
	 （2）有些是检测项
		   //要运行任务才能做出来的
			：记录数>1000W的表使用分区
	  （3）有些功能是静态实现，
		   有些功能是动态实现的。


		 //==========================DM（3）
		（4）有些是检查项，自动任务才能做的。
				 //加一个两个新的字段，
				 //就是标识这个规则是
						：自动任务 可用
						：工单上线 可用
（4）系统学习 Spring Drools、Apache Calcite ，
	 并集成进新的模块中

（2）审核的过程上使用JDBC要好一些
	 //这里可以封装一个模板的接口
	 //因为连接数据的过程是固定的

（2）看看结果怎么返回

（3）临时，每次的点击，每次的审核结果都要保存，参考 Archery 和 sqle
		//提交之后再做

//========================================= 部署一个测试环境
//========================================= 部署一个测试环境


（1）通知前端开发



//========================================= 任务配置设计  
//========================================= 任务配置设计  
 

（2）通过任务配置，来让它去自动执行审核任务

（3）并生成结果

（2）通过任务配置，来让它去自动执行审核任务

（3）并生成结果





//========================================= 加入审核流程 
//========================================= 加入审核流程 

（1）审核流配置，
	（1）角色管理

（1）提交审核工单

（2）通知功能


（2）审核

（3）执行操作




 

	（3）部署到一台服务器上面去
		 //通过网关调用接口

	（4）人工审核流程图
	（5）自动审核流程图
	（6）编写使用文档
	（7）分类里面加一个其它
			 //这样不确定都分在里面
	（7）在保存模板时，要检测，有些规则是冲突的。
		 这里看看有没有什么算法，巧妙设计
		 有些审核规则相互冲突的，不能同时生效，
		 所以它们要分开存放在不同的“审核模板”中

//========================================= 剩余的规则
//========================================= 剩余的规则


（8）默认模板-梳理成脚本

（9）仪表盘


