//================================== 贪心算法
//================================== 贪心算法
贪心算法（Greedy Algorithm）
是一种在 "每一步" 选择中都采取 "当前状态下" 的  "最优选择" 的策略，
以期望最终能够获得 "全局最优解"。
换句话说，贪心算法通过 "局部最优" 选择来 "构造问题的解"，
希望最终得到全局最优解。

"贪心算法" 常用于 "优化问题"，
"特别是" 那些 "可分解为子问题" 且 "每个子问题的最优解" 能
够 "直接导致" 全局最优解的情况。

贪心算法通常不保证能够得到全局最优解，
但在某些情况下，贪心策略确实能够得到最优解。

//贪心算法的一般步骤如下：

（1）确定问题的子问题：
		将原问题划分为 "一系列子问题"，通过 "解决这些子问题" 来解决原问题。

（2）确定贪心选择属性：找到每一步的最优解，
		 这个最优解应该是 "局部最优" 的，
		 即使加上该最优解后可能导致不是全局最优的解。
（3）构造贪心选择：
		通过贪心选择属性，构建一个局部最优解。


（4）解决子问题：使用贪心选择解决子问题，
		并将它们组合成原问题的解。

（5）求解全局最优解：通过 "局部最优解" 来得到 "全局最优解"。

贪心算法的优点是 "简单、高效"，并且对某些问题能够得到最优解。

然而，贪心算法并不适用于所有问题，因为在某些情况下，
贪心选择可能会导致得到局部最优解，而不是全局最优解。
因此，在应用贪心算法时，需要仔细分析问题的特性，
确保贪心选择的正确性。

//================================================================
//贪心名字的由来
很贪心： 找到 "一个最厉害的答案" 即为 "最终答案"。
但是它也可能只是 "当下的最优解"，而不是最终的
//================================================================




是的，贪心算法之所以被称为"贪心"，
是因为它在每一步都采取 "当前状态下看似最优的选择"，而不考虑全局的后果。
这种选择方式就像一个"贪心的人"一样，总是试图选择眼前看起来最好的选项，
而不考虑长远的影响。

贪心算法通常会选择当前局部最优解，希望通过这种贪心选择来达到全局最优解。
然而，并非所有问题都适合使用贪心算法，
因为贪心选择可能会导致得到次优解或者完全错误的解。
因此，在应用贪心算法时，需要仔细分析问题的性质，确保贪心选择的正确性。




//================================================================
//================================================================
//================================================================
//特别是那些 "可分解为子问题" 且 "每个子问题的最优解" 
//能够 "直接导致全局最优解" 的情况。
//是不是指：在《976. 三角形的最大周长》中
//https://leetcode.cn/problems/largest-perimeter-triangle/solutions/
//对长度排序后，最先能 "构成三角形的三条边"，
//即是：三个长度组成的、面积不为零的三角形的最大周长 。


是的，你的理解是正确的。
对于问题来说，如果它可以分解为子问题，
并且每个子问题的最优解能够直接导致全局最优解，
那么贪心算法可能是一个适用的解决方案。

在找到三角形的最大周长这个问题中，确实可以使用贪心算法。
问题可以分解为选取三个长度构成三角形的子问题，
并且在每一步中，选择长度排序后最大的三个数构成三角形的最大周长。
这种贪心选择确实能够得到全局最优解，即使不需要检查所有可能的三角形组合。
因此，在这种情况下，贪心算法是一个有效且简单的解决方案。





