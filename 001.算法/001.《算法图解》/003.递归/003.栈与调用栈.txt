



//================================================== 栈
//================================================== 栈


	在最上面添加数据

	弹出并删除最上面的元素


	//栈有两种操作：压入和弹出。	
	
	
//================================================== 调用栈
//================================================== 调用栈

所有函数调用都进入"调用栈"。

调用栈可能很长，这将 "占用大量的内存" 。

//================================================== 调用栈
//================================================== 调用栈

	一个重要的编程概念——调用栈（call stack）。

	//==========================
	假设你 "调用 greet("maggie")" 方法 ，
	计算机将首先 "为该函数" 调用分配 "一块内存"。

			//我们将方法的变量存储在内存中

			//每当你 "调用函数" 时，
			//计算机都 像这样 将 "函数调用涉及的" 所有变量的值 "存储到内存" 中。


	//============
	然后你 "再调用 greet2('maggie') " 方法。
	同样，计算机也为这个函数调用分配一块内存。

	_________________

	计算机使用 "一个栈" 来表示 "这些内存块"，
	其中 "第二个内存块" 位于 "第一个内存块" 的上面

	当 "上面的函数" 被调用 "返回之后"，栈顶被弹出//
	然后 "继续调用之前的" 函数


	调用 "另一个函数" 时，"当前函数" 暂停并 "处于未完成" 状态。
	"该函数的所有变量的值" 都还在 "内存中" 。

	执行完函数 greet2 后，你回到函数 greet，并 "从离开的地方" 开始 "接着往下执行"


 