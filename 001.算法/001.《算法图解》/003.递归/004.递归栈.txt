
//===========================================================
//===========================================================


"递归函数" 也使用 "调用栈" ！

		//只是 它创建的栈里面 "每次内存的值" 是不相同的。


"栈" 在递归中扮演着重要角色




//===========================================================
//===========================================================


/**
 * 递归：死循环递归
 * @author Administrator
 */
public class Test000 {
	public static void main(String[] args) {
		countdown(10);
	}
	private static void countdown(int i ) {
		System.out.println( i );
		countdown(i-1);// ←------递归条件
	}
}


//======================================：会报以下错误，这种就是创建了太多的栈，导致栈溢出了
//======================================：会报以下错误，这种就是创建了太多的栈，导致栈溢出了



Exception in thread "main" java.lang.StackOverflowError
	at java.base/sun.nio.cs.DoubleByte$Encoder.encodeLoop(DoubleByte.java:670)
	at java.base/java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:585)
	at java.base/sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:293)
	at java.base/sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:282)
	at java.base/sun.nio.cs.StreamEncoder.write(StreamEncoder.java:132)
	at java.base/java.io.OutputStreamWriter.write(OutputStreamWriter.java:205)
	at java.base/java.io.BufferedWriter.flushBuffer(BufferedWriter.java:120)
	at java.base/java.io.PrintStream.writeln(PrintStream.java:722)
	at java.base/java.io.PrintStream.println(PrintStream.java:938)
	at com.liheng.chapter_003.Test000.countdown(Test000.java:12)
	at com.liheng.chapter_003.Test000.countdown(Test000.java:13)


