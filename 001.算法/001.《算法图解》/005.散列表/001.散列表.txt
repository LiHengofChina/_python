


//========================= 散列表
//========================= 散列表


最有用的数据结构之一
散列表用途广泛。





//================================================================================================
//================================================================================================

假设你在一家杂货店上班。有顾客来买东西时，你得在一个本子中查找价格。
	//================================================
	//================================================
		（1）如果本子的内容不是按字母顺序排列的，
		你可能为查找 苹果（ apple ）的价格而浏览每一行，
		这需要很长的时间。此时你使用的是第 1 章介绍的简单查找，需要浏览每一行。
		还记得这需要多长时间吗？O(n)。
		（2）如果本子的内容是按字母顺序排列的，可使用二分查找来找出苹果的价格，
		这需要的时间更短，为O(logn)。

	//================================================
	//================================================
	
	运行时间 O(n)O(n) 和 O(logn)O(logn) 之间有天壤之别！
		二分查找的速度非常快。但作为收银员，
		在本子中查找价格是件很痛苦的事情，哪怕本子的内容是有序的。
		在查找价格时，你都能感觉到顾客的怒气。
		
		看来真的需要一名能够记住所有商品价格的雇员，
		这样你就不用查找了：问她就能马上知道答案。
		
	//如何聘到这样的雇员呢？
			从数据结构的角度来看看：


			（1）数组
			（2）链表
			（3）其实还有栈，但栈并不能用于查找
	
	//===========================================
	
	// 可使用数组 来实现 "记录商品价格" 的本子。
	// 这种数组的每个元素包含两项内容：商品名和价格。
	
	如果将这个 "数组按商品名" 排序，
	就可使用 "二分查找" 在其中查找商品的价格，
	这样查找价格的时间将为 "O(logn)"
	
	//===========================================
	然而，你希望查找商品价格的时间为 O(1) ，
	即你希望查找速度像 Maggie 那么快，这是散列函数的用武之地。
	
	
	


