
题目：给定字符串 a 与 b，用自底向上的 DP 表计算它们的 LCS 长度，并输出任意一条 LCS。

要求：定义 dp[i][j] 表示 a[:i] 与 b[:j] 的 LCS 长度。

转移：
		若 a[i-1] == b[j-1]：dp[i][j] = dp[i-1][j-1] + 1
		否则：dp[i][j] = max(dp[i-1][j], dp[i][j-1])

边界：	dp[0][*] = dp[*][0] = 0

回溯从	 dp[len(a)][len(b)] 出发，得到一条 LCS。

//===============================================================
//===============================================================

diff 算法（比如 Myers 算法）和 LCS 很接近：
	LCS 动态规划：用 DP 表找最长公共子序列，再推导差异。
	Myers diff：换了一种更高效的方式直接找“最短编辑路径”，本质上也在利用“公共部分”来减少差异。
所以可以说，diff 内部思想和 LCS 是一脉相承的，只是实现更高效。

