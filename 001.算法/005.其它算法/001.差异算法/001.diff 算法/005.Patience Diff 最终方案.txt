

//================================================================ 背景
//================================================================ 背景

由于 Diff.diffWords Diff.diffLines 都只能按一种方式对比，

不能同时满足 "增加、删除"  和 "修改" 行的对比，

所以我要想出一个新的方案来

//================================================================ 大体思路
//================================================================ 大体思路

	（1）先进行单词对比
				产生的结果是有下以几种

				（1）两有单词有差别，//这种看成是同一行，
					 如： time=1000 和  time=30x0

				（2）两边一模一样的 //这种看成是同一行，
					 如： liheng   和 liheng

				（3）两边完全不同的 //这种看成是同一行，
					 如： 1   和 liheng

				（5）

//================================================================ 按行比较备份（整个文件）
//================================================================ 按行比较备份（整个文件）


//行比较
// const getCompareData = (sourceLines: string, targetLines: string): CompareRow[] => {
//   const diffResult = Diff.diffLines(sourceLines, targetLines);
//   const data: CompareRow[] = [];
//   let lineNumber = 1; // 用于设置行号
//   diffResult.forEach((part) => {
//     if (part.added) {
//           data.push({
//             key: lineNumber,
//             lineNumber: lineNumber++,
//             sourceLine: '',
//             targetLine: part.value,
//           });
//     } else if (part.removed) {
//           data.push({
//             key: lineNumber,
//             lineNumber: lineNumber++,
//             sourceLine: part.value,
//             targetLine: '',
//           });
//     } else {
//           const sourceLines = part.value.split('\n');
//           const targetLines = part.value.split('\n');
//           sourceLines.forEach((sourceLine, index) => {
//                 if (sourceLine.trim() === '' && (targetLines[index] || '').trim() === '') {
//                   return;
//                 }
//                 data.push({
//                   key: lineNumber,
//                   lineNumber: lineNumber++,
//                   sourceLine: sourceLine,
//                   targetLine: targetLines[index] || '', // 确保 targetLine 有对应的行
//                 });
//           });
//     }
//   });
//   return data;
// };

//================================================================ 按单词比较备份（整个文件）
//================================================================ 按单词比较备份（整个文件）


    //按单词对比
    const getCompareData = (sourceText: string, targetText: string): CompareRow[] => {
      const wordDiffResult = Diff.diffWords(sourceText, targetText);

      const sourceLines: string[] = [''];
      const targetLines: string[] = [''];

      wordDiffResult.forEach((part) => {
        const lines = part.value.split('\n');

        lines.forEach((line, index) => {
          if (index > 0) {
            sourceLines.push('');
            targetLines.push('');
          }
          const currentLineIndex = sourceLines.length - 1;
          if (part.added) {
            targetLines[currentLineIndex] += line;
          } else if (part.removed) {
            sourceLines[currentLineIndex] += line;
          } else {
            sourceLines[currentLineIndex] += line;
            targetLines[currentLineIndex] += line;
          }
        });
      });

      const maxLines = Math.max(sourceLines.length, targetLines.length);
      const data: CompareRow[] = [];

      for (let i = 0; i < maxLines; i++) {
        data.push({
          key: i + 1,
          lineNumber: i + 1,
          sourceLine: sourceLines[i] || '',
          targetLine: targetLines[i] || '',
        });
      }

      return data;
    };