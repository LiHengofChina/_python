//==================================================  "Levenshtein 距离" 和 "LCS"   比较
//==================================================  "Levenshtein 距离" 和 "LCS"   比较

Levenshtein 距离 和 LCS 确实是 diff 算法的一种实现

具体来说，它们是两种不同的差异比较方法。


//===============================
//===============================
（1）Levenshtein 距离：用于计算两个字符串之间的最小编辑距离（插入、删除、替换），通常用于文本相似度的比较。

（2）LCS（Longest Common Subsequence）：计算两个字符串中最长的公共子序列，用来找出相同部分。


//================================================== Git 的 diff 算法
//================================================== Git 的 diff 算法

但是，Git 的 diff 算法 实际上是基于更高效的 Patience Diff 算法，
它结合了 LCS 和 Longest Increasing Subsequence (LIS) 方法，
更适合处理实际文件差异（特别是在处理大量文本时）。

虽然 Levenshtein 距离 和 LCS 都属于 diff 算法的范畴，
但 Git 使用的是一种优化版的 diff 算法。

