

//======================================== Diff 算法（差异比较算法）
//======================================== Diff 算法（差异比较算法）

业界有类似的对比算法，
通常用于文本、数据或文件的差异分析。
常见的对比算法包括：

//================ 常见算法：
//================ 常见算法：

（1）Levenshtein 距离（编辑距离）：用于计算两个字符串之间的最小操作次数
	 （插入、删除、替换）。
	  这可以帮助检测文本之间的差异，并能够处理缺失行、顺序错乱等问题。

（2）Longest Common Subsequence（LCS，最长公共子序列）：
	  通过找到两个字符串中的最长公共子序列来判断其差异，适合用于找出相同部分。

（3）Patience Diff 算法：一种改进版的 diff 算法，速度更快，能处理大型文件的差异比较。

	
	/***
	这种情况适用于 基于内容的比较算法（如 Diff 算法），
	特别是 Levenshtein 距离 或 Longest Common Subsequence（LCS），用于逐行或逐项对比文件内容，
	处理缺失项和顺序不同的情况。
	你可以根据每个部分的具体格式（如 key-value、表结构、索引等）进行对比，并根据实际差异输出结果。

	Diff 算法（如 Levenshtein 距离或 LCS）来对比文本内容，适合这种逐项对比的场景。
	*/


//======================================== 动态规划算法
//======================================== 动态规划算法

	动态规划（Dynamic Programming, DP）：
	一些复杂的对比算法（如 LCS 或 Levenshtein 距离）使用了动态规划的技术来优化计算，
	避免重复计算，适合用于大型数据集的对比。

//======================================== 三方差异合并（3-Way Merge）
//======================================== 三方差异合并（3-Way Merge）

	这种算法常用于版本控制系统（如 Git）中，用来合并来自不同分支的文件版本。
	它通过比较两个版本与基础版本（最初版本）来检测和解决冲突。

//======================================== 内容标识符
//======================================== 内容标识符

	哈希算法（Hashing）：将每一行或文件计算出哈希值，通过对比哈希值来检测差异。
	这种方法对内容较为固定且较大时非常高效。

