//==================================== 字符串 介绍
//==================================== 字符串 介绍
	创建字符串很简单，只要为变量分配一个值即可 
	
	var1 = 'Hello World!'
	var2 = "Python Runoob"	 
//==================================== 访问字符串中的值		 
//==================================== 访问字符串中的值		 
	var1 = 'Hello World!'
	var2 = "Python Runoob"

	print "var1[0]: ", var1[0]
	print "var2[1:5]: ", var2[1:5] 
	 
//==================================== 字符串拼接	 
//==================================== 字符串拼接	 
	+
	加号拼接两个字符串
var1 = 'Hello World!'
print "更新字符串 :- ", var1[:6] + 'Runoob!'	
//==================================== Python转义字符	 
//==================================== Python转义字符	 
	\(在行尾时)	续行符	
	\\			反斜杠符号
	\'			单引号
	\"			双引号
//==================================== Python字符串运算符
//==================================== Python字符串运算符
	+
	*
	[]
	[:]
	in			//在
	not in		//不在
	r	//按原始内容使用	print r"Liheng"
	R	//按原始内容使用	print R"Liheng"
//==================================== Python 字符串格式化
//==================================== Python 字符串格式化
	字符串格式化使用与 C 中 sprintf 函数一样的语法。
	
	//用法：
	print "My name is %s and weight is %d kg!" % ('Zara',21)

占位符：

	%c	 格式化字符及其ASCII码
	%s	 格式化字符串
	%d	 格式化整数
	%u	 格式化无符号整型
	%o	 格式化无符号八进制数
	%x	 格式化无符号十六进制数
	%X	 格式化无符号十六进制数（大写）
	%f	 格式化浮点数字，可指定小数点后的精度
	%e	 用科学计数法格式化浮点数
	%E	 作用同%e，用科学计数法格式化浮点数
	%g	 %f和%e的简写
	%G	 %f 和 %E 的简写
	%p	 用十六进制数格式化变量的地址
	

符号	功能
*		定义宽度或者小数点精度
-		用做左对齐
+		在正数前面显示加号( + )
<sp>	在正数前面显示空格
#		在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
0		显示的数字前面填充'0'而不是默认的空格
%		'%%'输出一个单一的'%'
(var)	映射变量(字典参数)
m.n.	m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)
//==================================== Unicode 字符串
//==================================== Unicode 字符串

print  u'Hello World !'
 
print  u'Hello\u0020World !'





	

