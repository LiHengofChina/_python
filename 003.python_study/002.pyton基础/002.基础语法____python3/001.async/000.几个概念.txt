//==================================================================== 协程
//==================================================================== 协程
（1）协程 (Coroutines)：
	在Python中，协程是一个 "特殊类型" 的 "函数"，
	它可以在 "执行中暂停"（通常是在某个await表达式处），
	并在 "稍后的某个时刻" 从 "暂停的地方恢复执行"。
（2）协程是使用async def定义的。
（3）当你调用一个协程函数时，它并不立即执行，而是返回一个协程对象。

async def my_async_function():
    print("Start")
    await asyncio.sleep(1)  # 模拟异步操作
    print("End")


//==================================================================== 事件循环
//==================================================================== 事件循环
事件循环 (Event Loop)： "事件循环" 是asyncio的核心组件，
它在 "一个线程中" 调度 和 "执行多个协程"。


当一个协程在await处暂停，
事件循环可以运行其他的协程。
这允许 "单线程" 中的 "多个协程" 并发执行
而不会导致 "线程阻塞"。


//并发 (Concurrency) vs. 并行 (Parallelism)：
//（1）并发是多个任务共享同一时间段的执行（但在给定的时刻可能只有一个任务在执行），
//（2）而并行是在同一时刻多个任务都在执行（如在多核CPU上）。



所以，

（1）当你运行asyncio.run(my_async_function())，
	 你启动了一个 "事件循环" 并开始运行 "协程my_async_function()"。

（2）如果这个协程在某个await表达式上暂停，事件循环可以切换并运行其他协程。
（3）当这些其他协程完成或暂停时，
	 事件循环可以返回并继续从暂停处运行my_async_function()。

//my_async_function()是你开始运行的"原始"或"初始"协程，
//而asyncio.run()是你用来启动事件循环并运行这个协程的方法。


总之， "协程" 允许在 "单个线程中实现并发" 执行，
它们可以 "暂停和恢复" ，而 "事件循环" 负责 "管理这些协程" 的 "调度和执行"。
 

