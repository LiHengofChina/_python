
//======================================================= 我的方案
//======================================================= 我的方案

	（1）先写一个单纯的 report.html 文件，里面有css样式和一些js库，都直接写在里面，反正就是一个文件

	（2）使用freemark 将这个 report.html 改成模板  report.html.ftl

	（3）当调用接口时接口内容查询数据，填充 report.html.ftl 就会生成一个带数据的 html页面

	（4）我们是前后端分离的项目，然后前端可以使用它
			（ 4.1 ） 前端点击下载时就可以下载这个报告到本地
			（ 4.2 ） 前端请求时，可以直接通过发送请求，拿到这个html页面直接显示在网页上面

//======================================================= 可行性验证
//======================================================= 可行性验证

（1）Freemarker 模板生成 HTML

	（1）你把 report.html 写成“单个文件”——所有 CSS、JS 都内联（或者引用 CDN）
	（2）然后改成 Freemarker 模板（report.html.ftl），在需要的地方用 ${…}、<#list …> 等占位
	（3）后端接口查询统计数据，填入数据模型，交给 Freemarker 渲染，就能得到一个完整的带数据的 HTML 字符串

		/**
			问题：ftl模板太大，会不会导致Freemarker渲染出问题，简单回答就好
				不会出问题。Freemarker 对模板大小没硬性限制，只是模板越大，
				加载和渲染时占用的内存和 CPU 越多，渲染速度可能略慢。只要你的 JVM 堆够大，就能正常渲染。
		*/



（2）前端下载或展示
	（1）下载：后端接口返回渲染好的 HTML，并设置响应头
		 Content-Type: text/html
		 Content-Disposition: attachment; filename="report.html"
		 前端直接发起下载请求即可。
		 /**
			问题：
				使用 GET 请求，因为下载是幂等的“读”操作。
				后端只需：
				在响应头里写 Content-Type: text/html （或 application/octet-stream 也可）
				如果要强制下载，额外加 Content-Disposition: attachment; filename="report.html"
				响应体就是渲染好的 HTML 字符串
				前端直接用 window.open 或者 a 标签的 href 发 GET 请求，就能拿到这个字符串并触发下载。
		 */

	（2）在线预览：前端拿到 HTML 字符串后，插入到一个 <iframe> 或者某个容器的 innerHTML，就能像普通页面一样展示。

//======================================================= 其它方面
//======================================================= 其它方面

最常见也是最轻量的做法：
	//后端用 Freemarker（或其他模板引擎）生成 HTML
	//提供一个 GET 接口，渲染后流式返回 HTML（带 Content‑Disposition），前端触发下载

如果还要 PDF/Word，也常在这基础上：
	//用 wkhtmltopdf／Headless Chrome 把 HTML 转 PDF
	//或者直接用 JasperReports、BIRT 这类专业报表引擎输出多种格式

