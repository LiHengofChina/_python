

"SQL采集" 指的是从数据库中获取执行的SQL语句，
这个过程通常是为了审计、分析、优化或其他目的。
具体到TDSQL（以及其他数据库），
可以通过 "几种方式" 实现SQL采集。
 
//======================================== 以下是几种常见的方法：
//======================================== 以下是几种常见的方法：

//===================（1）数据库审计日志
//===================（1）数据库审计日志
	 许多数据库系统（如MySQL、PostgreSQL、Oracle等）都提供了审计功能，
	 可以通过 "启用审计日志" 来记录 "所有执行的SQL语句"。
	 TDSQL可能也有类似的功能。

	//==============
	//==============
	（1）启用审计日志：通过配置数据库系统启用审计功能，
		 系统会将执行的SQL语句、执行时间、
		 执行用户等信息写入日志文件或表中。

	（2）查询审计日志：通过解析这些日志，获取执行的SQL。
	//============== 优点：
	//============== 优点：
	（1）不需要修改应用程序代码。
	（2）能够全局记录所有SQL执行。

	//============== 缺点：
	//============== 缺点：
	（1）审计日志可能会增加系统负载。
	（2）只记录执行后的SQL，无法获得实时信息。

//===================（2）数据库触发器
//===================（2）数据库触发器

	对于某些数据库操作（如插入、更新、删除），
	可以使用数据库触发器来捕获这些SQL操作。
	触发器会在相关操作发生时触发，
	将SQL语句、操作详情等信息保存到专门的日志表中。

	//==============
	//==============
	触发器的使用：在表的插入、更新或删除操作时创建触发器，
	将 "相关SQL语句" 及 "操作信息" 写入日志表。

	//============== 优点：
	//============== 优点：
	（1）适用于特定类型的SQL操作，能够精确控制要采集的SQL类型。
	（2）能够实时捕获SQL。

	//============== 缺点：
	//============== 缺点：
	（1）仅适用于特定的SQL操作（如INSERT、UPDATE、DELETE）。
	（2）需要在数据库层面进行配置，并且对表结构有一定影响。

//===================（3）数据库代理
//===================（3）数据库代理
	"数据库代理" 是指在 "数据库和应用程序" 之间引入一个代理层，
	所有的SQL请求都会通过这个代理层进行。
	这种方式可以拦截并记录所有的SQL请求。

	代理模式：在应用程序和数据库之间使用代理（如MySQL Proxy、pgproxy等），该代理能够记录所有传输的SQL语句。

	//============== 优点：
	//============== 优点：
	（1）能够捕获所有SQL请求，包括查询、插入、更新等操作。
	（2）适用于多种类型的数据库。

	//============== 缺点：
	//============== 缺点：
	（3）配置复杂，需要额外的代理层。
	（3）可能对性能产生影响。

//===================（4）查询日志
//===================（4）查询日志
	许多数据库系统（如MySQL、PostgreSQL）都可以启用查询日志功能，记录所有执行的SQL语句。
	（1）MySQL：可以启用general_log，记录所有执行的SQL查询。
	（2）PostgreSQL：可以启用log_statement，记录所有SQL语句。

	//============== 优点：
	//============== 优点：
	简单易配置，直接记录所有SQL。
	可以通过日志分析工具查看历史SQL执行。

	//============== 缺点：
	//============== 缺点：
	性能开销较大，尤其是在高并发环境下。
	不一定能获取到实时执行的SQL（有可能存在延迟）。


//===================（5）数据库查询性能分析工具
//===================（5）数据库查询性能分析工具

一些数据库提供了性能分析工具，可以捕获正在执行的SQL语句（如SHOW PROCESSLIST，EXPLAIN，pg_stat_activity等），
这对于捕获实时执行的SQL特别有用。

	//============== 优点：
	//============== 优点：
	实时获取SQL执行情况。
	对性能的影响较小。

	//============== 缺点：
	//============== 缺点：
	可能不适用于历史SQL的批量收集。
	对数据库负载较高时可能不可靠。

//===================（6）中间件层记录SQL
//===================（6）中间件层记录SQL
如果你使用了ORM框架（如MyBatis、Hibernate）或者API层中间件（如Spring、Django等），
你可以在这些层中加入SQL拦截器，捕获执行的SQL并将其记录到日志或数据库中。
	
	//==============
	//==============
	拦截器实现：通过在框架中配置SQL拦截器，将执行的SQL写入日志系统或者数据库。


	//============== 优点：
	//============== 优点：
	可以直接在应用层控制，灵活性高。不依赖数据库本身的配置。
	
	//============== 缺点：
	//============== 缺点：
	只会捕获应用程序发出的SQL，无法捕获其他来源（如数据库内部的操作）。
	