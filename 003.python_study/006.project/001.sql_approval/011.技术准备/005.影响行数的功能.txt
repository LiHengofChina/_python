

在 Archery 中，审核 "添加索引" 语句并显示影响的行数，
这通常是通过 SQL 执行计划（Execution Plan） 和 元数据查询 来实现的。
以下是实现此功能的关键步骤和原理：

//================================================================================ 功能实现的核心逻辑
//================================================================================ 功能实现的核心逻辑

（1）解析语句类型

	Archery 首先会识别 SQL 是一个 添加索引 的 DDL 语句
	（例如 ALTER TABLE ... ADD INDEX）。
	使用 SQL 解析器（如 TiDB 内置的解析器或其他解析工具）解析 SQL 语句，提取表名和涉及的字段。


（2）获取表的元数据

	通过查询目标数据库的元数据表（例如 information_schema 或 dba_tables）来获取表的相关信息，例如：
	（1）表的总行数（row_count）。
	（2）索引字段的分布情况。
	（3）当前已有的索引信息。
	在 MySQL 中，可以使用以下查询来获取行数：
	SELECT table_rows
	FROM information_schema.tables
	WHERE table_schema = '数据库名' AND table_name = '表名';

（3）计算索引的影响
	为了估算索引的影响，工具会根据索引字段的分布情况和表的行数，
	判断索引是否会对性能产生重大影响。

（4）影响行数的估算可能基于以下方式：
	 统计索引字段的唯一值数量（cardinality）
	 Cardinality 是数据库中字段的唯一值数量，能反映字段的选择性。
	 MySQL 可以通过以下方式查询：
	  SHOW INDEX FROM 表名;
	 查询结果中的 Cardinality 表示索引字段的唯一值数量。

（5）分析字段的分布：
	 使用 EXPLAIN 或 ANALYZE 命令模拟添加索引后的查询性能，统计哪些查询会受影响。
	EXPLAIN SELECT ... FROM 表名 WHERE 索引字段 = '值';


（6）生成 SQL 执行计划
	使用数据库的执行计划功能来模拟索引的影响： 在 MySQL 中，EXPLAIN 命令可以提供 SQL 的执行计划，包括扫描行数。
	EXPLAIN SELECT * FROM 表名 WHERE 条件;
	执行计划中会显示 "rows" 列，表示扫描的行数。

	在 Archery 的实现中，可能会先临时创建索引，然后执行相关查询计划来统计影响的行数。

（7）返回审核结果
	根据统计到的表行数、索引字段的选择性，
	以及执行计划中的扫描行数，Archery 将这些信息整合到审核报告中，显示出 "受影响的行数"。

//================================================================================ 具体数据库实现示例
//================================================================================ 具体数据库实现示例
MySQL 的实现
	通过 EXPLAIN 获取执行计划：
	EXPLAIN SELECT * FROM 表名 WHERE 新索引字段 = '某值';

	获取当前表的行数：
	SELECT table_rows
	FROM information_schema.tables
	WHERE table_schema = '数据库名' AND table_name = '表名';

	获取索引字段的 Cardinality（唯一值数量）：
	SHOW INDEX FROM 表名;

//================================================================================
//================================================================================

简单说：它就是需要 ---> SQL解析器 + 对应数据库的执行计划就可实现这样的功能 ，简单回答就好
ChatGPT 说：
ChatGPT
是的，SQL解析器 + 对应数据库的执行计划 就可以实现这样的功能。

