


（1）SqlVisitor 默认会访问到每个节点本身，但它不会递归地访问所有子节点。
为了遍历所有子节点，你需要使用一个递归的访问器。

//============================================================== SqlShuttle
//============================================================== SqlShuttle

SqlShuttle 是一个更适合遍历 "所有子节点的类" ，
它会递归地遍历 "整个 SQL 语法树" ，并且可以 "修改或打印" 每个节点及其子节点。


//============================================================== 示例：
//============================================================== 示例：

使用 SqlShuttle 可以让你遍历并打印每个节点及其所有子节点，像下面这样：


import org.apache.calcite.sql.*;
import org.apache.calcite.sql.parser.SqlParser;
import org.apache.calcite.sql.util.SqlShuttle;
import org.apache.calcite.sql.util.SqlVisitor;

public class SqlTraversalExample {

    public static void main(String[] args) throws Exception {
        String sql = "SELECT `s`.`name`, `c`.`course_name`, `er`.`score` " +
                     "FROM `student` `s` " +
                     "JOIN `enrollment` `e` ON `s`.`id` = `e`.`student_id` " +
                     "RIGHT JOIN `course` `c` ON `e`.`course_id` = `c`.`id` " +
                     "WHERE `s`.`name` IN (SELECT `name` FROM `student` WHERE `age` > 30)";

        // 创建 SqlParser 解析器
        SqlParser parser = SqlParser.create(sql);
        SqlNode sqlNode = parser.parseQuery();

        // 使用 SqlShuttle 遍历 SQL 语法树
		sqlNode.accept(new SqlShuttle(){

			@Override
			public SqlNode visit(SqlCall sqlCall) {
				if( sqlCall instanceof  SqlSelect ){
					System.out.println("Visited SQL Call: " + sqlCall.toString());
				}
				// 继续递归处理子节点
				return super.visit(sqlCall);
			}
			@Override
			public SqlNode visit(SqlLiteral sqlLiteral) {
				// 打印 SQL 常量节点
				System.out.println("Visited SQL Literal: " + sqlLiteral.toString());
				return super.visit(sqlLiteral);
			}
			@Override
			public SqlNode visit(SqlIdentifier sqlIdentifier) {
				// 打印 SQL 标识符节点
				System.out.println("Visited SQL Identifier: " + sqlIdentifier.toString());
				return super.visit(sqlIdentifier);
			}
		});
    }
}

//============================================================== 解释：
//============================================================== 解释：

（1）SqlShuttle：SqlShuttle 是 SqlVisitor 的子类，
		         它重写了 visit 方法，并且默认会 "递归访问" 所有子节点。
				 我们可以在 visit 方法中添加 "打印或修改节" 点的逻辑。

（2） visit(SqlSelect sqlSelect)：当访问到 SqlSelect 节点时，会打印该节点的内容，
		并继续递归访问其子节点。

visit(SqlCall sqlCall)：这个方法会被调用每当访问到 SqlCall 类型的节点。SqlCall 包含了 SQL 调用表达式，如 JOIN、WHERE 等。

递归访问：通过 super.visit(sqlNode) 或 super.visit(sqlCall) 等方法，SqlShuttle 会继续遍历子节点。

输出：这个例子会递归地打印每个节点的内容，包括 SELECT、JOIN、WHERE 和所有子节点。