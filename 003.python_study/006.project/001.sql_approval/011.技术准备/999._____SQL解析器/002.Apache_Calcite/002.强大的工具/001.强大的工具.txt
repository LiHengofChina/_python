
//=============================================================
//=============================================================

Apache Calcite 提供了多个强大的遍历器（visitor）和工具

用于处理和操作 SQL 语法树，除了 SqlVisitor 和 SqlShuttle 外，
还有一些常用的 "遍历器"  和 "操作工具"。
这些工具通常用于 "SQL 查询的解析"、"优化"、"转换"等方面，
以下是一些主要的遍历器和工具类：

//=====================（1）SqlMutator
//=====================（1）SqlMutator

是继承自 SqlVisitor 的另一个类，
用于修改 SQL 语法树中的节点。
与 SqlShuttle 相似，但 SqlMutator 设计上是用于修改 SQL 节点，并且返回新的节点。
它广泛应用于 SQL 转换和优化过程中。

//=====================（2）SqlShuttle
//=====================（2）SqlShuttle

SqlShuttle 是一个实现了 SqlVisitor 接口的类，
提供了默认的行为来递归访问 SQL 语法树的节点。
如果需要自定义 SQL 节点处理逻辑，可以重写特定的 visit 方法。


//=====================（3）RelShuttle
//=====================（3）RelShuttle

RelShuttle 类似于 SqlShuttle，但它用于 RelNode 类型的节点，而不是 SQL 节点。
RelNode 是 Calcite 中表示物理计划的节点，它用于处理查询的执行计划。
通过 RelShuttle，你可以访问和修改查询的执行计划。

//=====================（4）RelVisitor
//=====================（4）RelVisitor

RelVisitor 是用于遍历 RelNode 树的一个强大的工具，
类似于 SqlVisitor 和 SqlShuttle，它用于在查询优化阶段遍历并操作执行计划中的节点。
你可以通过继承并重写其 visit 方法来处理特定类型的 RelNode。

//=====================（5）SqlValidator
//=====================（5）SqlValidator

SqlValidator 主要用于验证 SQL 查询的语法和语义。
它会遍历 SQL 语法树，进行类型检查、名称解析等验证操作。
SqlValidator 是 SQL 解析的一个重要环节，

确保查询符合 SQL 语法规范并且能够正确执行。

//=====================（6）SqlNodeList
//=====================（6）SqlNodeList

SqlNodeList 是一个特殊的节点类，它继承自 SqlNode，用于存储一个节点列表。
虽然它本身不算是一个遍历器，但它经常用于管理多个 SQL 节点，
如 SELECT 中的多个 FROM、JOIN 或 WHERE 子句。
在遍历这些节点时，SqlNodeList 会参与递归遍历。

//=====================（7）SqlRexVisitor
//=====================（7）SqlRexVisitor

SqlRexVisitor 是用于处理 Calcite 中的表达式节点（RexNode）的访问者。
RexNode 是 Calcite 中用于表示逻辑表达式的节点（如计算、操作符等）。
SqlRexVisitor 允许你遍历和修改这些表达式。

//=====================（8）RelOptVisitor
//=====================（8）RelOptVisitor
RelOptVisitor 是用于在优化器中遍历 RelNode 的类。
优化器阶段会使用这个访问器来分析和修改执行计划（RelNode）。
通常，它是优化器自定义转换的一部分，用于应用各种优化规则。

//=====================（9）SqlOperatorTable
//=====================（9）SqlOperatorTable

SqlOperatorTable 不是一个遍历器，
但它是 Calcite 中用于查找 SQL 操作符（如 +、- 等）的核心类。
它为 SQL 操作符的解析、匹配和转换提供了支持，通常与遍历器一起使用。

//=====================（10）SqlOperatorTable
//=====================（10）SqlOperatorTable

RelTraitDef 和 RelTrait
RelTraitDef 和 RelTrait 类用于表示查询优化器的不同属性（比如执行方式、内存使用量等）。
通过遍历这些 trait，可以在优化阶段更改执行计划的策略。

//============================================================= 这些遍历器主要用于以下场景：
//============================================================= 这些遍历器主要用于以下场景：

（1）SQL解析：
		如 SqlVisitor 和 SqlShuttle 用于 SQL 查询解析阶段，帮助遍历 SQL 语法树。

（2）查询优化：
		如 RelVisitor 和 RelShuttle 用于遍历和修改执行计划，在查询优化过程中应用转换规则。

（3）表达式和操作符解析：
		如 SqlRexVisitor 用于遍历逻辑表达式，SqlOperatorTable 用于解析 SQL 操作符。

（4）验证与转换：
		如 SqlValidator 用于 SQL 语法和语义检查，SqlMutator 用于修改 SQL 节点。

//============================================================= 总结：
//============================================================= 总结：
Apache Calcite 提供了丰富的遍历器（visitor）和工具类，
这些工具支持 SQL 语法树和执行计划的遍历、验证、优化等功能。
通过继承和重写这些遍历器，你可以自定义自己的 SQL 或执行计划转换规则，
支持复杂的 SQL 解析、优化和执行。

