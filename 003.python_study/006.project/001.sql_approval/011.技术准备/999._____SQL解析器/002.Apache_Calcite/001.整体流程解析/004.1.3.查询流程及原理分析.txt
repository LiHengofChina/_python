 


//================================== To RelNode
//================================== To RelNode

进行元数据校验之后，我们得到的还是一棵SqlNode 抽象语法树，
接下来我们需要将其转换为RelNode 关系代数 Tree，
后续才能基于关系代数优化理论对其进行优化。

Calcite 使用SqlToRelConverter将SqlNode 转换为RelNode ，
其入口方法是convertQuery()，
之后会调用convertQueryRecursive方法，
底层最终调用 convertXXX 方法，递归遍历抽象语法树将SqlNode 转换为RelNode 。

有趣的是，要创建一个转换器，我们必须首先创建一个基于成本的规划器VolcanoPlanner的实例。
这是Apache Calcite的一个抽象问题。

为了创建VolcanoPlanner，我们再次传递公共配置和计划器将用于计算成本的RelOptCostFactory。
在生产级优化器中，您可能会定义一个自定义成本工厂，
因为内置工厂只接受关系的基数计数，这通常不足以进行适当的成本估计。

您还应该指定VolcanoPlanner应该跟踪哪些物理操作符属性。
每个属性都有一个描述符，它扩展了Apache Calcite的RelTraitDef类。
在我们的示例中，我们只注册了ConventionTraitDef，它定义了关系节点的执行后端。

VolcanoPlanner planner = new VolcanoPlanner(
    RelOptCostImpl.FACTORY, 
    Contexts.of(config)
);

planner.addRelTraitDef(ConventionTraitDef.INSTANCE);

然后，我们创建一个RelOptCluster，一个在转换和优化期间使用的公共上下文对象。

RelOptCluster cluster = RelOptCluster.create(
    planner, 
    new RexBuilder(typeFactory)
);

然后，我们就可以创建SqlToRelConverter了，完整代码如下：

private static RelRoot toRelNode(SqlNode sqlNode) {
    // 创建VolcanoPlanner, VolcanoPlanner在后面的优化中还需要用到
    VolcanoPlanner planner = new VolcanoPlanner(RelOptCostImpl.FACTORY, Contexts.of(config));
    planner.addRelTraitDef(ConventionTraitDef.INSTANCE);
    // 创建SqlToRelConverter
    RelOptCluster cluster = RelOptCluster.create(planner, new RexBuilder(typeFactory));
    SqlToRelConverter.Config converterConfig =
            SqlToRelConverter.config().withTrimUnusedFields(true).withExpand(false);
    SqlToRelConverter converter = new SqlToRelConverter(null, validator, catalogReader, cluster,
            StandardConvertletTable.INSTANCE, converterConfig);
    // 将SqlNode树转化为RelNode树
    RelRoot relRoot = converter.convertQuery(sqlNode, false, true);
    return relRoot;
}

注意，在转换过程中，Apache Calcite生成一个逻辑关系操作符树，这些操作符是抽象的，不针对任何特定的执行后端。
因此，逻辑运算符总是将Convention trait设置为Convention.NONE。
期望在优化期间将它们转换为物理操作符。物理操作符特定的Convention。

//================================== Rel Optimize
//================================== Rel Optimize

优化是将 "一棵关系树" 转换为 "另一棵关系树" 的过程。
您可以分别使用 "启发式" 或 "基于成本的规划器(HepPlanner和VolcanoPlanner)" 进行 "基于规则的优化"。
您也可以在没有规则的情况下手动重写树。
Apache Calcite附带了几个强大的重写工具，比如RelDecorrelator和RelFieldTrimmer。

//============= 咱们可以看下，上面的案例优化前和优化后的执行计划的情况。优化前，执行执行计划为：
//============= 咱们可以看下，上面的案例优化前和优化后的执行计划的情况。优化前，执行执行计划为：

LogicalAggregate(group=[{0}], GRADE=[SUM($1)]): rowcount = 75.0, cumulative cost = {3285.3125035762787 rows, 3202.0 cpu, 0.0 io}, id = 16
  LogicalProject(NAME=[$1], grade=[$5]): rowcount = 750.0, cumulative cost = {3200.0 rows, 3202.0 cpu, 0.0 io}, id = 15
    LogicalFilter(condition=[>($0, 0)]): rowcount = 750.0, cumulative cost = {2450.0 rows, 1702.0 cpu, 0.0 io}, id = 14
      LogicalJoin(condition=[=($0, $4)], joinType=[inner]): rowcount = 1500.0, cumulative cost = {1700.0 rows, 202.0 cpu, 0.0 io}, id = 13
        LogicalTableScan(table=[[student]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 11
        LogicalTableScan(table=[[score]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 12

//============= 优化后，执行计划为：
//============= 优化后，执行计划为：
LogicalAggregate(group=[{0}], GRADE=[SUM($1)]): rowcount = 75.0, cumulative cost = {1835.3125035762787 rows, 1802.0 cpu, 0.0 io}, id = 25
  LogicalProject(NAME=[$1], grade=[$5]): rowcount = 750.0, cumulative cost = {1750.0 rows, 1802.0 cpu, 0.0 io}, id = 23
    LogicalJoin(condition=[=($0, $4)], joinType=[inner]): rowcount = 750.0, cumulative cost = {1000.0 rows, 302.0 cpu, 0.0 io}, id = 30
      LogicalFilter(condition=[>($0, 0)]): rowcount = 50.0, cumulative cost = {150.0 rows, 201.0 cpu, 0.0 io}, id = 27
        LogicalTableScan(table=[[student]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 11
      LogicalTableScan(table=[[score]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 12



//================================== Physical Plan
//================================== Physical Plan

注意上面优化后的，还只是逻辑执行计划，
还需要转换为 "物理执行计划"，
Calcite也是通过Rule最终转化为物理执行计划的，
案例中的SQL最终转化为的物理执行计划为：


EnumerableAggregate(group=[{1}], GRADE=[$SUM0($3)]): rowcount = 75.0, cumulative cost = {1504.375 rows, 12367.127039663896 cpu, 0.0 io}, id = 1034
  EnumerableMergeJoin(condition=[=($0, $2)], joinType=[inner]): rowcount = 750.0, cumulative cost = {1420.0 rows, 12367.127039663896 cpu, 0.0 io}, id = 1032
    JdbcToEnumerableConverter: rowcount = 50.0, cumulative cost = {240.0 rows, 3806.8207048853315 cpu, 0.0 io}, id = 1023
      JdbcSort(sort0=[$0], dir0=[ASC]): rowcount = 50.0, cumulative cost = {235.0 rows, 3801.8207048853315 cpu, 0.0 io}, id = 1021
        JdbcProject(id=[$0], name=[$1]): rowcount = 50.0, cumulative cost = {190.0 rows, 281.0 cpu, 0.0 io}, id = 1019
          JdbcFilter(condition=[>($0, 0)]): rowcount = 50.0, cumulative cost = {150.0 rows, 201.0 cpu, 0.0 io}, id = 1017
            JdbcTableScan(table=[[db1, student]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 1
    JdbcToEnumerableConverter: rowcount = 100.0, cumulative cost = {280.0 rows, 8560.306334778565 cpu, 0.0 io}, id = 1030
      JdbcSort(sort0=[$0], dir0=[ASC]): rowcount = 100.0, cumulative cost = {270.0 rows, 8550.306334778565 cpu, 0.0 io}, id = 1028
        JdbcProject(student_id=[$1], grade=[$2]): rowcount = 100.0, cumulative cost = {180.0 rows, 261.0 cpu, 0.0 io}, id = 1026
          JdbcTableScan(table=[[db2, score]]): rowcount = 100.0, cumulative cost = {100.0 rows, 101.0 cpu, 0.0 io}, id = 3


//================================== To Linq Expression
//================================== To Linq Expression

物理执行，最终怎么执行了？确切的说，怎么访问数据了，
Calcite用的是Linq4j，也就是Linq的java版，将物理执行计划转化Linq表达式后，
然后执行。上述案例最终转换为Linq4j部分代码如下所示：

执行上述Linq4j代码，即可从相应数据库获得数据。关于这部分的详细内容，后续再详细介绍。


