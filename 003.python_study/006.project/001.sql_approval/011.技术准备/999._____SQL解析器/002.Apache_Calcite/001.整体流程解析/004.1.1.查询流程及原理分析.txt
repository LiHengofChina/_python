
详细分析从建立连接到创建statement,以后最后的执行查询的整个流程。

//==============================================================================（1）建立连接
//==============================================================================（1）建立连接

（1）通过上面的DEMO我们可以看到，第一步骤，仍然是建立连接：

Connection conn = DriverManager.getConnection("jdbc:calcite:",properties)


可以发现，建立连接时，使用的是calcite "自己的驱动jdbc:calcite", 详细的建立连接的过程如下：


建立连接涉及到 "Calcite的另一个子项目Avatica" ，
后面再详细介绍，最终获得的 Connection 为 CalciteConnection 。

//==============================================================================（2）创建Statement
//==============================================================================（2）创建Statement


与常规的 "数据库访问" 一样，建立连接后，创建Statement：

Statement stmt = conn.createStatement();
最终创建的Statement为CalciteJdbc41Statement，创建Statement的详细流程如下：


//==============================================================================（3）Statement Execute
//==============================================================================（3）Statement Execute

创建完Statement后，执行statement，执行的过程，正是Calcite的核心逻辑所在，

其整体流程图如下图所示：


其主要流程为：

（1）SQL通过SqlParser转换为SqlNode，同时也需要进行Sql校验；
（2）通过SqlToRelConverter将SqlNode转化为RelNode;
（3）对SqlNode进行优化，包括转化为物理执行计划；
（4）执行之执行计划，获得结果Results;

//================================== SQL解析
//================================== SQL解析

Calcite采用的是 "标准的SQL语言" ，其SQL语法为：Calcite SQL Language。

用户提交的SQL，Calcite首先会对其进行解析，
Calcite使用的JavaCC对SQL解析，
解析的结果是一个 "抽象语法树"，
其中 "每个节点都是SqlNode" 的一个子类。

//===========
//===========
具体代码上，将 "公共配置" 的一部分传递给 "解析器配置"，
然后实例化SqlParser，最后执行解析。如果您有 "自定义SQL语法"，
则可以将 "自定义解析器工厂类" 传递给配置。
public SqlNode parse(String sql) throws Exception {
    SqlParser.ConfigBuilder parserConfig = SqlParser.configBuilder();
    parserConfig.setCaseSensitive(config.caseSensitive());
    parserConfig.setUnquotedCasing(config.unquotedCasing());
    parserConfig.setQuotedCasing(config.quotedCasing());
    parserConfig.setConformance(config.conformance());

    SqlParser parser = SqlParser.create(sql, parserConfig.build());

    return parser.parseStmt();
}
 