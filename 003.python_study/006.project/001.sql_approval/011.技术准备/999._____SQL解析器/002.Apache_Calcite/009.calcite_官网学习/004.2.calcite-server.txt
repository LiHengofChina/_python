
//============================================ 服务器
//============================================ 服务器

Calcite 的核心模块 (calcite-core) 支持 SQL 查询 (SELECT) 和 DML 操作 (INSERT， UPDATE， DELETE， MERGE)，

但不支持 CREATE SCHEMA 或 CREATE TABLE 等 DDL 操作。

正如我们将看到的，DDL 使元数据库中的状态模型变得复杂，
并使解析器更难以扩展，因此我们将 DDL 排除在核心之外。


服务器模块 (calcite-server) 为 Calcite 添加了 DDL 支持。
它扩展了 SQL 解析器，使用与子项目相同的机制，添加了一些 DDL 命令：




服务器模块 (calcite-server) 为 Calcite 添加了 DDL 支持。
它扩展了 SQL 解析器，使用与子项目相同的机制，添加了一些 DDL 命令：

CREATE 和 DROP SCHEMA；
CREATE 和 DROP FOREIGN SCHEMA；
CREATE 和 DROP TABLE（包括 CREATE TABLE ... AS SELECT）；
CREATE 和 DROP MATERIALIZED VIEW；
CREATE 和 DROP VIEW；
CREATE 和 DROP FUNCTION；
CREATE 和 DROP TYPE。

https://calcite.apache.org/docs/reference.html#ddl-extensions

//============================================ 使用 Calite 服务器模块
//============================================ 使用 Calite 服务器模块

请将 calcite-server.jar 包含在你的类路径中，
并添加 parserFactory=org.apache.calcite.sql.parser.ddl.SqlDdlParserImpl#FACTORY 到 JDBC 连接字符串（请参阅连接字符串属性 parserFactory）。

//=========== 下面是一个使用 sqlline shell 的示例。
//=========== 下面是一个使用 sqlline shell 的示例。
$ ./sqlline
sqlline version 1.3.0
> !connect jdbc:calcite:parserFactory=org.apache.calcite.sql.parser.ddl.SqlDdlParserImpl#FACTORY sa ""
> CREATE TABLE t (i INTEGER, j VARCHAR(10));
No rows affected (0.293 seconds)
> INSERT INTO t VALUES (1, 'a'), (2, 'bc');
2 rows affected (0.873 seconds)
> CREATE VIEW v AS SELECT * FROM t WHERE i > 1;
No rows affected (0.072 seconds)
> SELECT count(*) FROM v;
+---------------------+
|       EXPR$0        |
+---------------------+
| 1                   |
+---------------------+
1 row selected (0.148 seconds)
> !quit

//======================== （1）
//======================== （1）

calcite-server 模块是可选的。它的目标之一是使用可以从 SQL 命令行尝试的简单示例，
来展示 Calcite 的功能（例如物化视图、外部表和自动生成列）。
calcite-server 使用的所有功能都可以通过 calcite-core 中的 API 获得。



如果你是子项目的作者，你的语法扩展不太可能与 calcite-server 中的语法扩展匹配，
因此我们建议你通过扩展核心解析器来添加 SQL 语法扩展。
如果你需要 DDL 命令，你可以将 calcite-server 复制粘贴到你的项目中。

目前，元数据库尚未持久化。当你执行 DDL 命令时，你正在通过添加和删除可从根 Schema 访问的对象，来修改内存元数据库。
同一 SQL 会话中的所有命令都将看到这些对象。
你可以通过执行相同的 SQL 命令脚本在将来的会话中创建相同的对象。

Calcite 还可以充当数据虚拟化或联邦查询的服务器：Calcite 管理多个外部模式中的数据，
但对于客户端而言，这些数据似乎都在同一个地方。
Calcite 选择应在何处进行处理，以及是否创建数据副本以提高效率。
calcite-server 模块是朝着这一目标迈出的一步；
行业级解决方案需要进一步打包（使 Calcite 作为服务运行）、元数据库持久性、授权和安全性。



