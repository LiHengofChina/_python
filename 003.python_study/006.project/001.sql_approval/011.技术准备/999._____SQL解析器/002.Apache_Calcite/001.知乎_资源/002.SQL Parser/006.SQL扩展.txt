给Calcite新增一个创建雾化视图的语法，如下所示：

CREATE MATERIALIZED VIEW [IF NOT EXIST] view_name AS query


//======================================================================================================== 第一步：新增一种SqlCall
//======================================================================================================== 第一步：新增一种SqlCall

（1）新增一个新的SqlCall名为CreateMaterializedView，继承SqlCall，实现其抽象方法，

如下所示：


public class CreateMaterializedView extends SqlCall {
    public static final SqlSpecialOperator CREATE_MATERIALIZED_VIEW = new SqlSpecialOperator(
            "CREATE_MATERIALIZED_VIEW", SqlKind.OTHER_DDL);
    SqlIdentifier viewName;
    boolean existenceCheck;
    SqlSelect query;

    public CreateMaterializedView(SqlParserPos pos, SqlIdentifier viewName, boolean existenceCheck, SqlSelect query) {
        super(pos);
        this.viewName = viewName;
        this.existenceCheck = existenceCheck;
        this.query = query;
    }

    @Override
    public SqlOperator getOperator() {
        return CREATE_MATERIALIZED_VIEW;
    }

    @Override
    public List<SqlNode> getOperandList() {
        List<SqlNode> operands = new ArrayList<>();
        operands.add(viewName);
        operands.add(SqlLiteral.createBoolean(existenceCheck, SqlParserPos.ZERO));
        operands.add(query);
        return operands;
    }

    @Override
    public void unparse(SqlWriter writer, int leftPrec, int rightPrec) {
        writer.keyword("CREATE MATERIALIZED VIEW");
        if (existenceCheck) {
            writer.keyword("IF NOT EXISTS");
        }
        viewName.unparse(writer, leftPrec, rightPrec);
        writer.keyword("AS");
        query.unparse(writer, leftPrec, rightPrec);
    }
}

//======================================================================================================== 第二步：编写语法文件
//======================================================================================================== 第二步：编写语法文件

复制codegen目录下的文件到demo项目以便扩展，在codegen/includs/parseimpls.ftl文件中，添加如下内容：

SqlNode SqlCreateMaterializedView() :
{
    SqlParserPos pos;
    SqlIdentifier viewName;
    boolean existenceCheck = false;
    SqlSelect query;
}
{
    <CREATE> { pos = getPos(); }
    <MATERIALIZED> <VIEW>
    <#-- [] 代表里面的元素可能出现 -->
        [ <IF> <NOT> <EXISTS> { existenceCheck = true; } ]
    <#-- CompoundIdentifier() 为 Calcite 内置函数，
    可以解析类似 catalog.schema.tableName 这样的全路径表示形式 -->
    viewName = CompoundIdentifier()
    <AS>
    <#-- SqlSelect() 为 Calcite 内置函数，解析一个 select sql -->
    query = SqlSelect()
    {
        return new CreateMaterializedView(pos, viewName, existenceCheck, query);
    }
}

//======================================================================================================== 第三步：配置FMPP
//======================================================================================================== 第三步：配置FMPP

修改在codegen/config.fmpp文件，在相应位置添加如下内容：

data: {
  parser: {
    keywords: [
        "IF",
        "MATERIALIZED"
    ]

    statementParserMethods: [
        "SqlCreateMaterializedView()"
    ]

    implementationFiles: [
        "parserImpls.ftl"
    ]
  }
}

freemarkerLinks: {
  includes: includes/
}


//======================================================================================================== 第四步：FMPP Generate
//======================================================================================================== 第四步：FMPP Generate

使用freemarker生成模版文件Parser.jj，Maven配置如下：

<plugin>
    <configuration>
        <!--配置文件地址-->
        <cfgFile>src/main/codegen/config.fmpp</cfgFile>
        <!--文件输出目录-->
        <outputDirectory>target/generated-sources/fmpp/</outputDirectory>
        <!--文件模板存放目录-->
        <templateDirectory>src/main/codegen/templates</templateDirectory>
    </configuration>
    <groupId>com.googlecode.fmpp-maven-plugin</groupId>
    <artifactId>fmpp-maven-plugin</artifactId>
    <version>1.0</version>
    <executions>
        <execution>
            <phase>generate-sources</phase>
            <goals>
                <goal>generate</goal>
            </goals>
        </execution>
    </executions>
    <dependencies>
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>2.3.28</version>
        </dependency>
        <dependency>
            <groupId>net.sourceforge.fmpp</groupId>
            <artifactId>fmpp</artifactId>
            <version>0.9.16</version>
            <exclusions>
                <exclusion>
                    <groupId>org.freemarker</groupId>
                    <artifactId>freemarker</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
</plugin>

//======================================================================================================== 第五步：Javacc编译
//======================================================================================================== 第五步：Javacc编译

编译Parser.jj文件，即可得到生成的代码，这里简单分析下相应的文件，Parser.jj中生成的相关代码如下所示：

/**
 * Parses an SQL statement.
 */
SqlNode SqlStmt() :
{
    SqlNode stmt;
}
{
    (
        LOOKAHEAD(2) stmt = SqlCreateMaterializedView()
    |
        stmt = SqlSetOption(Span.of(), null)
    |
        stmt = SqlAlter()
    |
        stmt = OrderedQueryOrExpr(ExprContext.ACCEPT_QUERY)
    |
        stmt = SqlExplain()
    |
        stmt = SqlDescribe()
    |
        stmt = SqlInsert()
    |
        stmt = SqlDelete()
    |
        stmt = SqlUpdate()
    |
        stmt = SqlMerge()
    |
        stmt = SqlProcedureCall()
    )
    {
        return stmt;
    }
}

SqlNode SqlCreateMaterializedView() :
{
    SqlParserPos pos;
    SqlIdentifier viewName;
    boolean existenceCheck = false;
    SqlSelect query;
}
{
    <CREATE> { pos = getPos(); }
    <MATERIALIZED> <VIEW>
        [ <IF> <NOT> <EXISTS> { existenceCheck = true; } ]
    viewName = CompoundIdentifier()
    <AS>
    query = SqlSelect()
    {
        return new CreateMaterializedView(pos, viewName, existenceCheck, query);
    }
}

可以看到，SqlStmt是入口函数，SqlCreateMaterializedView已经添加上。再看下生成的SqlParserImpl中相关的代码，首先我们找到入口SqlStmt，可以看到相关代码如下：

//======================================================================================================== 第六步：Javacc编译
//======================================================================================================== 第六步：Javacc编译

第七步：验证测试

@Test
public void test() throws SqlParseException {
    String sql = "CREATE MATERIALIZED VIEW IF NOT EXISTS MyView AS SELECT * FROM STORY";

    SqlParser.Config myConfig = SqlParser.config()
            .withQuoting(Quoting.DOUBLE_QUOTE)
            .withQuotedCasing(Casing.UNCHANGED)
            .withParserFactory(SqlParserImpl.FACTORY);
    SqlParser parser = SqlParser.create(sql, myConfig);
    SqlNode sqlNode = null;
    try {
        sqlNode = parser.parseQuery();
    } catch (SqlParseException e) {
        Assert.fail();
        throw new RuntimeException(e);
    }
    Assert.assertTrue(sqlNode instanceof CreateMaterializedView);
}