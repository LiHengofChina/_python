

在了解了Javacc和fmpp的原理后，
我们再分析下 Caclite 的SQL Parser原理，首先看看语法文件。


//=========================================================== 语法文件
//=========================================================== 语法文件

src
	main
		codegen

			includes
				- compoundldentifier.ftl -------------- freemark 文件
				- parserImples.ftl       -------------- freemark 文件
			templates
				- Parser.jj              -------------- javacc 文件

			- config.fmpp				 -------------- 
			- default_config.fmpp
		java
			org.apache.fmpp

//=========================================================== 生成代码
//=========================================================== 生成代码

通过Javac编译，最终生成的SqlParser如下图所示：

SqlParserImpl.java
		//SqlParserImpl.java 是通过 JavaCC 编译生成的 SQL 解析器的源码。
		//它负责将 SQL 语句解析成抽象语法树（AST），
		//从而供后续的分析和处理使用。



//=========================================================== 使用 生成好 的SQL解析器
//=========================================================== 使用 生成好 的SQL解析器

SQL解析器生成好之后，我们就可以利用其 "进行解析SQL"，
如下所示：
 
public SqlNode parse(String sql) throws Exception {
    SqlParser.ConfigBuilder parserConfig = SqlParser.configBuilder();
    parserConfig.setCaseSensitive(config.caseSensitive());
    parserConfig.setUnquotedCasing(config.unquotedCasing());
    parserConfig.setQuotedCasing(config.quotedCasing());
    parserConfig.setConformance(config.conformance());

    SqlParser parser = SqlParser.create(sql, parserConfig.build());

    return parser.parseStmt();
}