

//=========================================================== （1）引入 jar 包
//=========================================================== （1）引入 jar 包

<dependencies>
    <dependency>
        <groupId>net.java.dev.javacc</groupId>
        <artifactId>javacc</artifactId>
        <version>7.0.6</version> <!-- 请确保版本是最新的 -->
    </dependency>
</dependencies>


//=========================================================== （2）引入插件
//=========================================================== （2）引入插件
在 pom.xml 中配置一个插件，使 Maven 能够编译 .jj 文件

	<build>
	    <plugins>
	    
	        <plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>javacc-maven-plugin</artifactId>
			    <version>3.1.0</version>
	            
	        </plugin>
	    </plugins>
	</build>
	

//=========================================================== （3）创建目录
//=========================================================== （3）创建目录

src/main/javacc




//=========================================================== （4）calculator0.jj
//=========================================================== （4）calculator0.jj

options{
    JavaCC的选项
}

PARSER_BEGIN(解析器类名）
package 包名；
import 库名；
public class 解析器类名{
    任意的Java代码
}
PARSER_END(解析器类名）

词法描述器

语法分析器

//=================== 
//=================== 

我们利用javacc，编写一个支持加法的计算器
编写 Javacc 文件（即 .jj 文件），它是定义语法规则的地方。
/* calculator0.jj An interactive calculator. */


options {
    STATIC = false ;
}
PARSER_BEGIN(Calculator)
    import java.io.PrintStream ;
    class Calculator {
        public static void main( String[] args )
            throws ParseException, TokenMgrError, NumberFormatException {
            Calculator parser = new Calculator( System.in ) ;
            parser.Start( System.out ) ;
        }
        double previousValue = 0.0 ;
    }
PARSER_END(Calculator)

SKIP : { " " }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < NUMBER : <DIGITS>
                   | <DIGITS> "." <DIGITS>
                   | <DIGITS> "."
                   | "."<DIGITS> >
        }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }


void Start(PrintStream printStream) throws NumberFormatException :
{}
{
    (
        previousValue = Expression()
        <EOL> { printStream.println( previousValue ) ; }
    )*
    <EOF>
}

double Expression() throws NumberFormatException : {
    double i ;
    double value ;
}
{
    value = Primary()
    (
        <PLUS>
        i = Primary()
        { value += i ; }
    )*
    { return value ; }
}

double Primary() throws NumberFormatException :
{
    Token t ;
}
{
    t = <NUMBER>
    { return Double.parseDouble( t.image ) ; }
}


START: 这是语法的开始规则，它会开始解析 Expression。
Expression: 表示加法和减法。
Term: 表示乘法和除法。
Factor: 表示数字或者括号中的表达式。
Number: 定义了数字的匹配规则。




//===========================================================（5）运行 javacc 生成解析器
//===========================================================（5）运行 javacc 生成解析器

（1）目录
	E:\_python\003.python_study\006.project\001.sql_approval\011.技术准备\999._____SQL解析器\002.Apache_Calcite\002.SQL Parser\javacc_demo_001


（2）命令  mvn javacc:javacc -X
		  //仅运行 javacc 插件

（3）生成文件
	target/generated-sources/javacc

（4）说明：
	 运行成功之后 ：
	 表明 JavaCC 已经成功处理了  ".jj 文件" 并生成了 "对应的解析器代码"。

（5）


//===========================================================（6）生成一些java源码
//===========================================================（6）生成一些java源码


编译这些源码才得到解析器


Calculator.java

CalculatorConstants.java

