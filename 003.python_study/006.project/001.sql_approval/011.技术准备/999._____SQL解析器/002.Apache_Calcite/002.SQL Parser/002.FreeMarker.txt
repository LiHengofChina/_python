

<dependency>
    <groupId>org.freemarker</groupId>
    <artifactId>freemarker</artifactId>
    <version>2.3.31</version>
</dependency>

//=========================================================== FMPP
//=========================================================== FMPP

FreeMarker 是一个用Java语言编写的 "模板引擎"，
它 "基于模板" 来生成 "文本输出"。其原理如下图所示：

/**
<html>
	...
		Hello ${name}
	...
</html>
*/
+
/**
...
	model.setName("World")
...
*/
+  FreeMarker   
=
/**
<html>
	...
		Hello World
	...
</html>
*/

//=========================================================== 实际案例
//=========================================================== 实际案例

我们看一个非常简单的案例，fmpp配置文件 config.fmpp：

//==============================
//==============================

# 用data标示为变量
# 一般变量替换为 ${one} or ${two.three} ,具体语法请参考freemarker语法
# include 指令插入另个freemarker模板
data: {
     one:1,
     two: {
        three: 3
     }
     implementationFiles: [
             "parserImpls.ftl"
      ]
}

#
freemarkerLinks: {
    includes: includes/
}

//============================== freemarker模版1:
//============================== freemarker模版1:
public class Main {
    public static void main(String[] args){
        System.out.println(${one} + ${two.three});
    }
    /**
     * 额外附加代码
     */
    <#list implementationFiles as file>
        <#include "/@includes/"+file />
    </#list>
}

//============================== freemarker模版2:
//============================== freemarker模版2:

static {
    System.out.println(${one});
    System.out.println(${two.three});
}

//============================== 最终，生成的文件如下：
//============================== 最终，生成的文件如下：

public class Main {
    public static void main(String[] args){
        System.out.println(1 + 3);
    }
    /**
     * 额外附加代码
     */
	static {
		System.out.println(1);
		System.out.println(3);
	}
}

通过上面这个案例，我们基本了解了FMPP的作用了。

