

要使用 Apache Calcite 对 SQL 查询进行优化，首先需要理解 Calcite 是如何工作的。
Calcite 提供了一个完整的查询优化框架，其中包括：
	（1）解析
	（2）优化
	（3）执行计划生成等步骤。
你已经成功解析了 SQL 查询，现在我们将继续进行优化操作。


//===================================================================== 使用 Apache Calcite 进行 SQL 优化
//===================================================================== 使用 Apache Calcite 进行 SQL 优化

（1）解析 SQL： 
			你已经成功解析了 SQL 查询并获取了 SqlNode 对象。
			下一步是使用 Calcite 的优化器对其进行优化。


（2）注册表和上下文环境： 
			Calcite 需要 "上下文来" 执行 "查询优化"。
			你需要为 Calcite 配置一个 RelOptCluster 和 RelOptTable，
			这些会用于优化过程中的查询重写和执行计划。

（3）查询优化： Calcite 提供了多种内置的优化规则，
		（1）查询重写（例如，子查询转换为连接）。
		（2）合并相同类型的操作（例如，多个 JOIN 操作的合并）。
		（2）基于代价的优化（例如，选择最优的连接顺序）。


（4）执行优化： 
			优化后的查询将返回一个新的 SQL 查询计划，并可以进一步执行。

//===================================================================== 示例步骤
//===================================================================== 示例步骤
 // 将 SqlNode 转换为 SQL 字符串，得到优化后的 SQL 查询

                if(parseSucdess){

                    //（11-4）SQL优化建议
                    if(
                    sqlNode instanceof SqlSelect ||
                    sqlNode instanceof SqlUpdate ||
                    sqlNode instanceof SqlDelete ||
                    sqlNode instanceof SqlOrderBy ||
                    sqlNode instanceof SqlBasicCall
                    ){

                        // 将 SQL 转换为逻辑计划
                        RelNode relNode = null;
                        try{
                            relNode = SqlToRexConverter.convertSqlToRel(typeFactory,validator,catalogReader,sqlNode);
                        } catch (Exception e) {
                            e.printStackTrace();
                            throw new SQLAuditBusinessException(String.format("RelNode 转换为 RexNode 时出错: %s ", e.getMessage()));
                        }


                        // 创建 VolcanoPlanner 实例，用于执行 SQL 查询的优化
                        VolcanoPlanner planner = new VolcanoPlanner();
                        // 注册默认的优化规则，这里使用的规则集不包括物化视图（false）和可绑定的（false）
                        RelOptUtil.registerDefaultRules(planner, false, false);
                        // 获取逻辑计划的集群信息（RelOptCluster），集群表示一个优化器的上下文环境
                        RelOptCluster cluster = relNode.getCluster();
                        // 创建期望的特性集合（RelTraitSet），这里使用了 EnumerableConvention 表示在枚举执行中使用特定的执行计划
                        RelTraitSet desiredTraits = cluster.traitSet().replace(EnumerableConvention.INSTANCE);
                        // 修改 RelNode 的特性，并返回新的 RelNode
                        RelNode newRoot = planner.changeTraits(relNode, desiredTraits);
                        // 设置新的根节点
                        planner.setRoot(newRoot);
                        // 通过优化器寻找最佳的执行计划（即优化后的 RelNode）
                        RelNode optimizedRelNode = planner.findBestExp();
                        // 使用 RelToSqlConverter 将优化后的 RelNode 转换回 SqlNode，便于进一步处理
                        RelToSqlConverter sqlConverter = new RelToSqlConverter(CalciteSqlDialect.DEFAULT);
                        // 使用 visitChild(0, optimizedRelNode) 获取优化后的第一个子节点的 SQL 语句（转换为 SqlNode），并将其作为 SQL 语句
                        SqlNode sqlNodex = sqlConverter.visitChild(0, optimizedRelNode).asStatement();
                        // 将 SqlNode 转换为 SQL 字符串，得到优化后的 SQL 查询
                        String optimizedSql = sqlNodex.toString();
                    }
                }
