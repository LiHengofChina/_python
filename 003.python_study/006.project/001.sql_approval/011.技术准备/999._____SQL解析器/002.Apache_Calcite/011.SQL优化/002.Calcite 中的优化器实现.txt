

有了前面的基础后，这里来看下 Calcite 中优化器的实现，
RelOptPlanner 是 Calcite 中优化器的基类，其子类实现如下图所示：

//===================================================== Calcite 中的优化器实现
//===================================================== Calcite 中的优化器实现

RelOptPlanner
	AbstractRelOptPlanner
		VolcanoPlanner
		MockRelOptPlanner
		HepPlanner

//Calcite 中关于优化器提供了两种实现：

（1）HepPlanner：就是前面 RBO 的实现，它是一个启发式的优化器，按照规则进行匹配，
				 直到达到次数限制（match 次数限制）
				 或者遍历一遍后不再出现 rule match 的情况才算完成；
（2）VolcanoPlanner：就是前面 CBO 的实现，它会一直迭代 rules，
					 直到找到 cost 最小的 paln。

//=====================================================【核心】
//=====================================================【核心】


前面提到过像 "calcite" 这类 "查询优化器" 最核心的 "两个问题之一" 
是怎么把 "优化规则" 应用到关系代数相关的RelNode Tree上。

所以在阅读 "calicite的代码" 时就得带着 "这个问题" 去看看它的 "实现过程"，
然后才能判断 "它的代码实现" 得 "是否优雅"。
calcite的 "每种规则" 实现类( RelOptRule 的子类)都会声明 "自己应用在哪种RelNode子类" 上，//这就是关键
每个RelNode子类其实都可以看成是一种operator(中文常翻译成算子)。

VolcanoPlanner就是 "优化器"，用的是 "动态规划算法"，
在创建 "VolcanoPlanner的实例" 后，通过calcite的标准jdbc接口执行sql时，

默认会给这个 "VolcanoPlanner的实例" 注册将近 "90条优化规则(还不算常量折叠这种最常见的优化)"，

所以看代码时，
知道 "什么时候" 注册 "可用的优化规则" 是第一步(调用VolcanoPlanner.addRule实现)，
这一步比较简单。

接下来就是如何筛选规则了，
当把 "语法树" 转成 "RelNode Tree" 后是 "没有必要" 把前面 "注册的90条优化规则" 都用上的，所以需要有个筛选的过程，
因为每种规则是有 "应用范围" 的，按 RelNode Tree的 "不同节点类型" 就可以筛选出 "实际需要用到的优化规则" 了。
这一步说起来很简单，但在calcite的代码实现里是 "相当复杂" 的，也是非常关键的一步，
是从调用VolcanoPlanner.setRoot方法开始间接触发的，
如果只是静态的看代码不跑起来跟踪调试多半摸不清它的核心流程的。

筛选出来的优化规则会封装成 VolcanoRuleMatch，然后扔到 RuleQueue 里，
而这个RuleQueue正是接下来执行动态规划算法要用到的核心类。
筛选规则这一步的代码实现很晦涩。

第三步才到 VolcanoPlanner.findBestExp ，本质上就是一个动态规划算法的实现，
但是 "最值得关注" 的还是怎么用 "第二步筛选出来的规则" 对 RelNode Tree 进行变换，
变换后的形式还是一棵RelNode Tree，


最常见的是把LogicalXXX开头的RelNode子类换成了EnumerableXXX或BindableXXX，
总而言之，看看具体优化规则的实现就对了，都是繁琐的体力活。
一个优化器，理解了上面所说的三步基本上就抓住重点了。






