
//=====================================================================
//=====================================================================

//========== （1）定义开关
//========== （1）定义开关
 
在一个 "JSON 或 JS 模块" 里声明 "各个功能的布尔开关（feature flags）"。


//========== （2）编译时注入
//========== （2）编译时注入

使用打包工具（如 Webpack 的 DefinePlugin、Rollup 的 replace 插件等）
把开关常量注入到源代码里。

//========== （3）死码消除（Tree-shaking）
//========== （3）死码消除（Tree-shaking）

在代码中用 if (featureX) { … } 包裹不同时显示的逻辑，
生产环境构建会把 featureX 替换为常量 true/false，再由压缩工具自动移除永远不执行的分支。
	//可以，但这样未使用的分支代码就不会被剔除，会一起打包进去，导致体积变大。
	//没删掉的分支会让包变大，从而增加下载、解析和执行时间，影响页面加载速度。


//===================================================================== 和权限控制有什么区别
//===================================================================== 和权限控制有什么区别

（1）有本质区别： 编译时注入是在 "打包阶段" 固定 "显示逻辑" ，用户 "权限控制" 是在 "运行时" 根据 "当前账号动态判断"。
（2）本质上都是用 if 做判断，只是一个是在编译/打包阶段确定（编译时注入），另一个是在运行时根据用户权限动态判断。


//===================================================================== 与权限控制是否冲突
//===================================================================== 与权限控制是否冲突

不会冲突。两者作用层面不同：

（1）Toggle（功能开关） 控制的是“功能是否可用”或“界面是否展示”，相当于在代码层决定某些功能块整体开关，和谁登陆无关；

（2）权限控制 则是根据当前用户身份、角色、权限来决定“用户能看到或能操作哪些功能”，这是在运行时根据用户身份动态判断。

通常做法是先用 Toggle 决定功能是否在系统中“整体上线”，然后在该功能内部再做权限校验，判断当前用户是否有权访问。
这样既能保证功能按环境或版本阶段逐步开启，也能确保只有有权限的用户才能真正使用。



//===================================================================== 开关的类型
//===================================================================== 开关的类型

（3）除了 true/false，也可以用数组或其它结构来表示一组功能开关
	 {
	   "showNewBanner": true,
	   "enableBetaChat": false,
	   "useDarkModeByDefault": true,
	   "enabledFeatures": ["a", "b", "c"],
	   "defaultVisibleMenus": ["home", "dashboard"]
	 }

//===================================================================== 加入国际化
//===================================================================== 加入国际化

开关 和词条 同时存在了，如果此时加入国际化，那和国际化的词条是不是重复了
{
   "showNewBanner": true,
   "enableBetaChat": true,
   "useDarkModeByDefault": true,
   "enabledFeatures": ["a", "b", "c"],
   "defaultVisibleMenus": ["home", "dashboard"]

    "titles": {
	  "home": "首页",
	  "dashboard": "仪表盘"
	}
}

//解决办法
//toggle 里只保留键（key）或标识，比如：
{
  "titles": {
    "home": "home.title",
    "dashboard": "dashboard.title"
  }
}
然后真正的中英文词条都放在 i18n 资源里：

// i18n/en.json
{
  "home.title": "Home",
  "dashboard.title": "Dashboard"
}

// i18n/zh.json
{
  "home.title": "首页",
  "dashboard.title": "仪表盘"
}
//当用户选择中文时，使用zh.json，当用户选择英文时，就使用 en.json它们会同时打包到代码里，用户切换时内部如何切换的

一般做法是把所有语言的资源都打包进去（或者单独打包成不同文件按需加载）。
运行时会维护一个“当前语言”变量，比如 locale = 'zh' 或 locale = 'en'，
然后在渲染文本时根据这个变量去对应的资源里取值：


// 举例：简化版的 i18n 取词函数
function t(key) {
  const resources = locale === 'zh' ? zh : en;
  return resources[key] || key;
}

// 使用时
<span>{ t('home.title') }</span>

当用户切换语言时，只要把 locale 从 'zh' 改成 'en'（或反过来），
组件重新渲染时就会自动从 en.json 里去取对应的值。

