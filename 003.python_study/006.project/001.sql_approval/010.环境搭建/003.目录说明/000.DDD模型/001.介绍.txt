
https://blog.csdn.net/u010020088/article/details/143212173

//===========================================
//===========================================

DDD（Domain-Driven Design，领域驱动设计）是一种 "软件开发方法"，
	它强调 "软件系统设计" 应该以 "问题领域" 为中心，而不是 "技术实现"为主导。
	DDD通过一系列手段：
		（1）如统一语言
		（2）业务抽象
		（3）领域划分和领域建模等来 "控制软件复杂度"，
	
	主要用来指导如何
		解耦业务系统、
		划分业务模块、
		定义业务领域模型及其交互。
以下是DDD设计的详细解析：


//=========================================== DDD设计的核心理念
//=========================================== DDD设计的核心理念

（1）领域模型：领域模型是DDD方法的核心，
		     它描述了领域中 "各个对象" 和 "他们之间关系" 的 "抽象概念模型"。
			 领域模型不仅仅是 "一个类图" 或 "实体关系图"，
			 更多的是一种 "思考方式" 。

（2）统一语言：在DDD中，团队成员（包括技术、业务、运营、产品等）
	     使用 "统一的业务语言" 进行沟通，这有助于 "减少误解和冲突"。

（3）限界上下文：为了避免 "同样的概念或语义" 在 "不同的上下文环境" 中产生歧义，
		 DDD在战略设计上提出了 "限界上下文" 的概念，用来确定语义所在的领域边界。

（4）分层架构：DDD架构通常包括：
			（1）领域层（Domain Layer）
			（2）应用层（Application Layer）
			（3）基础设施层（Infrastructure Layer）等。
				//领域层是核心，负责 "定义和实现" 领域模型和业务逻辑；
				//应用层负责 "协调" 和 "组织" 领域层的操作；
				//"基础设施层" 负责 与 "外部资源" 的交互。




