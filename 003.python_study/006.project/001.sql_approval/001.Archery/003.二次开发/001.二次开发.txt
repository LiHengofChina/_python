
https://archerydms.com/development/


//================================================================================== 基础开发环境
//================================================================================== 基础开发环境


//============== redis, mysql 作为基础
//============== redis, mysql 作为基础

可使用 docker 进行搭建，或使用 mysql 提供的安装程序进行搭建, 
预先创建一个 db archery，并将 "连接串" 写进 "环境变量"

# 根目录下的 .env 文件
DATABASE_URL="mysql://root:密码@127.0.0.1:3306/archery"



//============== 然后创建 migrations, 这样可以 django 可以帮你自己创建数据库
//============== 然后创建 migrations, 这样可以 django 可以帮你自己创建数据库

# migrations
python manage.py makemigrations sql
python manage.py makemigrations
python manage.py migrate

# 安装开发用的依赖

pip install -r dev-requirements.txt

最后 python manage.py runserver 即可开始运行和相关开发

//================================================================================== 单元测试
//================================================================================== 单元测试

本项目使用 pytest 做单元测试, 
可以先学习 pytest 相关知识, 或参考已有的单元测试, 相关链接如

在上面的基础环境搭建完成后, 你可以在根目录使用 pytest 命令运行单元测试


//================================================================================== 数据库引擎
//================================================================================== 数据库引擎


为了兼容多种数据库资源, 我们引入了数据库引擎(Engine)的概念, 
具体代码在 sql/engines/目录下, 
具体实现类似java 的Interface, 基本思路如下:


（1）定义一个EngineBase https://github.com/hhyo/Archery/blob/master/sql/engines/__init__.py

class EngineBase:
    """enginebase 只定义了init函数和若干方法的名字, 具体实现用mysql.py pg.py等实现"""


（2）继承EngineBase来具体实现这些方法, 为了保证所有的方法返回的数据类型一致, 
	 我们定义了：
		ResultSet	//对应查询的结果集
		ReverSet  	//审核/执行工单的结果集


//================================================================================== 如何接入不支持的数据库
//================================================================================== 如何接入不支持的数据库

（1）在model层加入新数据库的名字
	 https://github.com/hhyo/Archery/blob/master/sql/models.py#L72

（2）在engines目录下新增一个 python 文件, 如oracle.py , 文件内部定义一个Engine, 并继承EngineBase:

		from sql.engines import EngineBase

		class OracleEngine(EngineBase):
			def get_connection(self, db_name=None):
		...

		将 
			get_connection
			query_check
			filter_sql
			query
			get_all_databases
			get_all_tables
			get_all_columns_by_tb
			describe_table
		方法实现后, 
		这种数据库的 "查询" 方法就可用了


将其他方法实现后, 工单执行就可用了, 所有实现都可以暂时使用伪实现, 如脱敏, 语句检查等, 只要返回值和文档中要求一致即可

（1）在 get_engine 函数中加入 "新类型数据库" 的入口
（2）通知模块代码分析


//================================================================================== 通知模块
//================================================================================== 通知模块



