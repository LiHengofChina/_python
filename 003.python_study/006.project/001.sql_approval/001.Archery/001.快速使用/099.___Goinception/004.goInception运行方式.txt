


GoInception 是一个 以服务形式启动的工具，同时也支持 命令行交互。
它可以运行在后台，持续监听请求，通常用于 SQL 审核、执行和管理。

//=================================================================== 以服务形式运行（主要用途）
//=================================================================== 以服务形式运行（主要用途）

//======== 服务模式：
//======== 服务模式：

（1）GoInception 作为一个后台服务运行，监听指定端口（默认是 4000）。

（2）前端或其他工具通过 HTTP 或 MySQL 协议与 GoInception 通信，"发送 SQL 请求" 进行 "审核和执行"。

（3）使用服务模式的典型命令：
	goinception -config /path/to/config.toml

（4）服务启动后，它会持续运行，等待外部请求。
//======== 用途：
//======== 用途：

用于持续 SQL 审核。
与其他平台（如 Archery）集成。

//=================================================================== 命令行模式（临时使用）
//=================================================================== 命令行模式（临时使用）

//======== 命令行模式（临时使用）
//======== 命令行模式（临时使用）

命令行交互模式：

（1）可以直接通过命令行运行 GoInception，执行一次性任务。
（2）示例命令：
	 goinception --query 'select * from db.table'

//======== 用途：
//======== 用途：
（1）单次任务的执行和调试。
（2）测试某些特定 SQL 的审核规则。





GoInception 是一个 以服务形式启动的工具，同时也支持 命令行交互。
它可以运行在后台，持续监听请求，通常用于 SQL 审核、执行和管理。

//=================================================================== 以服务形式运行（主要用途）
//=================================================================== 以服务形式运行（主要用途）

//======== 服务模式：
//======== 服务模式：

（1）GoInception 作为一个后台服务运行，监听指定端口（默认是 4000）。

（2）前端或其他工具通过 HTTP 或 MySQL 协议与 GoInception 通信，"发送 SQL 请求" 进行 "审核和执行"。

（3）使用服务模式的典型命令：
	goinception -config /path/to/config.toml

（4）服务启动后，它会持续运行，等待外部请求。
//======== 用途：
//======== 用途：

用于持续 SQL 审核。
与其他平台（如 Archery）集成。

//=================================================================== 命令行模式（临时使用）
//=================================================================== 命令行模式（临时使用）

//======== 命令行模式（临时使用）
//======== 命令行模式（临时使用）

命令行交互模式：

（1）可以直接通过命令行运行 GoInception，执行一次性任务。
（2）示例命令：
	 goinception --query 'select * from db.table'

//======== 用途：
//======== 用途：
（1）单次任务的执行和调试。
（2）测试某些特定 SQL 的审核规则。


