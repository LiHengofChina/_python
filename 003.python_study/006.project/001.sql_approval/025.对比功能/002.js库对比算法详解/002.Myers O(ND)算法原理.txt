
//========================================== Myers O(ND) 算法原理
//========================================== Myers O(ND) 算法原理

		输入：两个序列（比如字符串 A 和 B）。

		目标：找到一个 " 最短的 '编辑路径' "，
		把 A 转换成 B（允许操作：插入、删除、保留）。

		/**
			ABC → AC → ACD
		*/

		/**

			Myers O(ND) 算法就是 在 "所有 '把 A 变成 B 的路径' 里"，
			找到 "最短的编辑路径"。
				路径越短 → 差异越少 → 相似度越高。
		*/

//========================================== 网格模型（不是网络：是网格）
//========================================== 网格模型（不是网络：是网格）

		把两个字符串分别放在 X 轴和 Y 轴，形成一个二维网格。
		从左上角 (0,0) 出发，目标是走到 (N,M)。
		向右走一步代表 "删除" ，向下走一步代表 "插入"，沿对角线走代表 "匹配"。

		/**。
			这里的 "网格模型" 只是解释 Myers 算法的一种直观比喻：
			把两个字符串分别放在 X、Y 轴 → 形成一个网格。
			在网格里走路径（右=删除，下=插入，对角=匹配）。
			所以叫 "网格模型"，是帮助理解的形象化说法。
		*/



//========================================== 编辑距离 D
//========================================== 编辑距离 D

		最小的 D 表示从 A 转到 B 至少要多少次 "插入/删除"。

		/**
			所有情况用 "网格表示" 之后，由于"多个子序列"放在格子中，
			离 "对角线" 越近相似，
			所以使用离  "对角线"  最近的字符组成路径就是最短路径
		*/
		网格里会有很多可能的子序列路径，离斜线越近说明越相似；
		选取最接近对角线的路径，就是 最短编辑路径。


//========================================== 最短路径搜索
//========================================== 最短路径搜索

		Myers 算法用一条 "对角线 K = x − y" 来表示状态空间。
		它会在 "前进" 和 "回溯" 之间做平衡，
		每次尝试 "走得更远"，直到找到 "最短路径"。

//========================================== 复杂度
//========================================== 复杂度

时间复杂度：O(ND)，其中

		N = 两个字符串的长度之和
		D = 最小编辑距离

空间复杂度：通常是 O(N + D²)（实现时有优化成线性空间）。


//========================================== diff 库的实现
//========================================== diff 库的实现

diff 库里有一个 Diff 基类，定义了 diff() 方法。

具体的 diff 算法实现是在 diff/base.js → Diff.prototype.diff 里，用的就是 Myers 算法。

它会把结果包装成一个 差异块数组，每个块带有：

		added: true → 目标字符串里新增的片段
		removed: true → 源字符串里被删除的片段
		没标记 → 公共子序列

//========================================== 举个例子
//========================================== 举个例子

//============ 源代码
//============ 源代码

import { diffWords } from 'diff';

const result = diffWords('ABC', 'ACD');
console.log(result);

//============ 结果大概是：
//============ 结果大概是：
[
  { value: 'A' },           // 公共部分
  { value: 'B', removed: true },  // 删除
  { value: 'C' },           // 公共部分
  { value: 'D', added: true }     // 插入
]
这就是 Myers 算法找到的最短路径：
ABC → AC → ACD

//========================================== 总结：
//========================================== 总结：

核心算法：Myers O(ND) 差异算法。
本质：在二维网格里找最短路径，等价于求“最长公共子序列”。
应用：几乎所有现代 diff 工具（git diff、GNU diff、JS diff 库）都在用它。




