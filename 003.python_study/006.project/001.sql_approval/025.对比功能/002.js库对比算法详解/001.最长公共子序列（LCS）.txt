
//========================================== "最长公共子序列（LCS）"
//========================================== "最长公共子序列（LCS）"

diff 这个 JS 库（npm 包名就是 diff，由 Kevin Decker 维护）
表面上看是计算  "算字符串差异"，

但它的核心其实是基于 
	"最长公共子序列 (LCS, Longest Common Subsequence) "
	思想的 O(ND) diff 算法（也叫 Myers diff algorithm）。

//========================================== "动态规划" 可以求 "最长公共子序列（LCS）"
//========================================== "动态规划" 可以求 "最长公共子序列（LCS）"

	/**
		在做 "华为、腾讯" 等等那些大厂等在线的面试题时就会遇到到 
			"最长公共子序列（LCS）" 题
		就是那些大厂常考的经典 "动态规划" 题之一；

		而 diff 库用的 Myers 算法，本质上就是在 LCS 思想 上做了更高效的优化。
	*/

	/**
		PS:
			动态规划是一种解题思路/方法论，
			而 LCS（最长公共子序列） 这个问题正好可以用动态规划来解。
			
			动态规划 = 解题套路
			LCS = 可以用这个套路解决的经典问题之一
	*/


//========================================== " Myers diff algorithm" 求的是 "最短编辑序列（差异）"。
//========================================== " Myers diff algorithm" 求的是 "最短编辑序列（差异）"。

	/**
		diff 库用的 Myers 算法，本质上就是在 LCS 思想 上做了更高效的优化。

		diff 库内部用的就是 Myers O(ND) diff 算法，而不是单纯的 LCS "动态规划" 解法。
	*/

//================ （1）算法来源
//================ （1）算法来源

	 diff 库里最核心的算法是 "Eugene W. Myers" 在 1986 年提出的经典论文：
			"An O(ND) Difference Algorithm and Its Variations"。
		//Eugene W. Myers 是一位计算机科学家的人名。
		//Eugene W. Myers 读作：尤金·W·迈尔斯

//================ （2）应用
//================ （2）应用
	这个算法是现在大多数文本对比工具（包括 git diff）的理论基础。


//========================================== "动态规划" 和 "Myers diff algorithm" 比较
//========================================== "动态规划" 和 "Myers diff algorithm" 比较

Myers diff algorithm 比单纯的 动态规划解 LCS 更高效、更适合工程应用，
所以现代 diff 工具（包括 git、diff.js）都用 Myers 算法。


