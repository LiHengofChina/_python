
//============================================（
//============================================（
针对“查询之外”对数据库的操作，
尤其是涉及到数据修改、删除、插入等写操作时，应该使用事务。


//============================================（1）引入事务管理依赖
//============================================（1）引入事务管理依赖


<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>


//============================================（2）在服务层方法上使用 @Transactional 注解
//============================================（2）在服务层方法上使用 @Transactional 注解


在 AuditParameterServiceImpl 的 updateAuditParameter 方法上添加 @Transactional 注解，以保证事务管理。

 @Override
    @Transactional  // 这里加上事务注解
    public int updateAuditParameter(AuditParameter auditParameter) {
        // 进行更新操作
        return auditParameterRepository.save(auditParameter) != null ? 1 : 0;
    }
//============================================（3）配置事务管理器（如果需要）
//============================================（3）配置事务管理器（如果需要）



如果你使用的是 Spring Boot，
通常无需手动配置事务管理器。
如果需要手动配置，
可以在配置类中加上 @EnableTransactionManagement：

//============================================（3）步骤 4：验证事务生效
//============================================（3）步骤 4：验证事务生效

现在，如果在 updateAuditParameter 方法中有任何异常抛出，
事务将会回滚。你可以尝试抛出异常测试事务回滚：


@Transactional
public int updateAuditParameter(AuditParameter auditParameter) {
    auditParameterRepository.save(auditParameter);
    if (someCondition) {
        throw new RuntimeException("Something went wrong");
    }
    return 1;
}
