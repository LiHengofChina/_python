 

//============================================== application（应用层）
//============================================== application（应用层）

（1）作用：处理 "业务流程" ，协调 "领域层的逻辑"，负责与外界的交互。
（2）对比 MVC：类似于 控制层（C） 的一部分，但职责更清晰，
			   专注于 "调用领域层" 逻辑。

（3）示例：一个 "服务类" 协调 "多个领域对象" 完成一个 "业务功能"，
			比如 "处理用户请求" ，调用 "领域逻辑" 并返回结果。

//============================================== domain（领域层）
//============================================== domain（领域层）

（1）作用：核心层，定义业务规则和领域逻辑。
（2）对比 MVC：类似于你熟悉的 模型层（M），但更强调 "业务逻辑的封装和聚合"（比如实体、值对象、仓储接口等）。
（3）示例：订单聚合根、领域服务等，专注于 "业务逻辑" 本身。

//============================================== infrastructure（基础设施层）
//============================================== infrastructure（基础设施层）

（1）作用：负责与 "外部系统" 、"数据库"、消息队列等的交互，提供底层技术支持。
（2）对比 MVC：类似于 "持久层"，但不仅限于 "数据库"，还包括 "其他外部依赖（如 API 调用、缓存等）"。
（3）示例：数据库访问（DAO/Repository）、外部 API 调用工具类等。


//============================================== common（公共工具模块）
//============================================== common（公共工具模块）

（1）作用：存放通用的代码，供其他模块复用。
（2）对比 MVC：是你以前项目中用的 工具类 的增强版本，独立模块化管理。
（3）示例：自定义注解、工具方法、常量定义。

//============================================== web（接口层）
//============================================== web（接口层）

（1）作用：负责接收 HTTP 请求，作为用户和系统的入口。
（2）对比 MVC： 类似于 控制层（C），但更专注于处理外部请求，解析参数，并调用 application 层处理。
（3）示例：Controller 类定义了 API 的 URL 和返回的 JSON 数据。

//==============================================================================总结
//==============================================================================总结

web -> application -> domain -> infrastructure 是调用链，职责分明。
common 模块提供公共工具，所有层都可以用到。
domain 确实像是 模型（Entity/VO）和服务层（业务逻辑）结合，是核心业务逻辑的实现。
这种划分是合理的，符合领域驱动设计（DDD）的思想。

