
//======================================================= 说明
//======================================================= 说明
这个项目采用典型的分层架构，
分为 
	application（应用层）、
	domain（领域层）、
	infrastructure（基础设施层）、
	common（公共工具模块）、
	web（接口层），

并通过 start 模块进行统一启动和配置。
每个模块职责清晰，领域划分明确。

种划分基于 DDD（领域驱动设计） 和分层架构思想，适用于 "微服务项目"，
可以很好地 "管理复杂的业务逻辑" 和 "代码的模块化"。


这种划分相对于 传统的 MVC 会显得更清晰、灵活，特别适合大型微服务系统。

//========================= application 模块
//========================= application 模块
作用：主要负责 "业务逻辑的实现" 和 "应用层" 的交互。
层级含义：
	（1）aggregate, host, monitoring, task, topology 
		 等目录：按领域划分，分别实现相关领域的业务逻辑。

	（2）command, dto, convert, impl 等子目录：
		 分别表示命令处理、数据传输对象、
		 对象转换工具和具体实现类。

//========================= common 模块
//========================= common 模块

作用：提供通用工具和基础设施，供其他模块复用。

层级含义：
		annotations: 自定义注解。
		constants: 定义常量。
		exceptions: 自定义异常处理。
		interfaces: 公共接口定义。
		request, utils: 请求模型和通用工具类。

//========================= domain 模块
//========================= domain 模块
作用：负责核心领域逻辑的实现。
层级含义：
		aggregate, task, host, 等：按领域划分的模块。
		repository, service, vo, event: 
		分别负责数据持久化接口、业务服务实现、值对象（VO）、
		领域事件等领域逻辑。

//========================= infrastructure 模块
//========================= infrastructure 模块

作用：对接外部资源或技术实现，作为支撑层。
层级含义：
		external: 外部系统的相关对接实现（如客户端、DTO、配置等）。
		internal: 内部的持久化实现、DAO（数据访问对象）、实体类（PO）。
		utils: 公共工具方法。
		convert, repository: 数据转换工具类和仓储实现。

//========================= web 模块
//========================= web 模块
作用：负责与外部交互的接口层（如 REST API），主要实现控制器和请求处理。
层级含义：
		controller: 定义控制器，用于处理 HTTP 请求。
		convert, request, response: 数据转换、请求模型和响应模型。
		interceptor, aspect: 处理请求的拦截器和切面逻辑。
		template, dashboard: 提供页面或数据展示相关功能。

//========================= start 模块
//========================= start 模块
作用：项目的启动模块，通常包含项目入口点和基础配置。
层级含义：
	config: 配置类。
	resources: 包含数据库迁移文件（如 Flyway 的 db/migration）和静态资源。

	start 模块就是专门的启动入口模块，负责项目的启动和基础配置，例如加载 Spring Boot 的主类、全局配置等。



