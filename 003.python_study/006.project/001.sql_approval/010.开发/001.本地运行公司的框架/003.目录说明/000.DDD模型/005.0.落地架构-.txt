
//============================================================= 落地架构
//============================================================= 落地架构

	"DDD分层架构"
	"洋葱架构（整洁架构）"
	"六边形架构" 都是以 "领域模型" 为核心，

	实行分层架构，内部核心业务逻辑与外部应用、资源隔离并解耦。

//============= 洋葱架构（整洁架构）
//============= 洋葱架构（整洁架构）
	"整洁架构" 最主要的原则是 "依赖原则"，
	它定义了 "各层的依赖关系" ，
	越往里 "依赖越低"，
	代码 "级别越高"，
	越是 "核心能力"。
	"外圆代码" 依赖只能 "指向内圆"，
	 "内圆" 不需要知道 "外圆" 的任何情况。

（1）"领域模型" 实现领域内核心业务逻辑，
		它封装了 "企业级的业务规则" 。
	 //领域模型的 "主体" 是 "实体"，
	 //一个实体可以是 "一个带方法" 的 "对象"，
	 //也可以是 "一个数据结构" 和 "方法集合"。

（2）"领域服务" 实现涉及 "多个实体的复杂业务逻辑"。

（3） "应用服务实现" 与 "用户操作相关的服务" 组合与编排，
	 它包含了应用特有的业务流程规则，封装和实现了系统所有用例。

（3）最外层主要提供 "适配的能力"，适配能力分为 "主动适配" 和 "被动适配"。
	 主动适配主要实现外部用户、网页、批处理和自动化测试等对内层业务逻辑访问适配。
	 被动适配主要是实现核心业务逻辑对基础资源访问的适配，
	 比如数据库、缓存、文件系统和消息中间件等。

（3）红圈内的领域模型、领域服务和应用服务一起组成软件核心业务能力。


//============= 六边形架构
//============= 六边形架构

（1）红圈内的六边形实现应用的核心业务逻辑；

（2）外六边形完成 "外部应用" 、"驱动" 和 "基础资源" 等的 "交互和访问"，
	 对前端应用以 "API主动适配的方式" 提供服务，
	 对基础资源以 "依赖倒置 '被动适配' 的方式" 实现 "资源访问"。



//============= 六边形架构
//============= 六边形架构

.....
用到再查
