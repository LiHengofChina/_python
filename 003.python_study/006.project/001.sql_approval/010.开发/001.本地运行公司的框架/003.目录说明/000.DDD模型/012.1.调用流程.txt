
（1）微服务内跨层服务调用


	微服务架构下往往采用 "前后端分离" 的设计模式，前端应用独立部署。
	前端应用调用发布在 "API网关" 上的 "Facade 服务"，
	Facade 定向到应用服务。
	"应用服务"作为服务组织和编排者，它的 "服务调用 "有这样两种路径：


		（1）"应用服务调用" 并组装 "领域服务"。
			 此时 "领域服务" 会组装 "实体" 和 "实体方法"，
			 实现 "核心领域逻辑"。

			 "领域服务"通过 "仓储服务" 获取 "持久化数据对象"，
			 完成 "实体数据初始化"。


		（2）"应用服务" 直接调用 "仓储服务"。
			这种方式主要针对像 "缓存"、文件等类型的 "基础层数据访问"。
			这类数据主要是查询操作，没有太多的领域逻辑，不经过领域层，
			不涉及数据库持久化对象。

（2）微服务之间的服务调用，微服务之间的应用服务可以直接访问，
	也可以通过API网关访问。

	由于跨微服务操作，在进行数据新增和修改操作时，
	你需关注 "分布式事务"，保证数据的一致性。

（3）领域事件驱动
	"领域事件驱动" 包括 "微服务内" 和 "微服务之间" 的事件。
	微服务内通过 "事件总线（EventBus）完成聚合之间" 的 "异步处理"。
	微服务之间通过 "消息中间件" 完成。
	异步化的 "领域事件驱动机制" 是一种 "间接的服务访问" 方式。


	当应用服务业务逻辑处理完成后，
	如果发生领域事件，
	可调用事件发布服务，
	完成事件发布。

	当接收到订阅的主题数据时，
	事件订阅服务会调用事件处理领域服务，
	完成进一步的业务操作。



