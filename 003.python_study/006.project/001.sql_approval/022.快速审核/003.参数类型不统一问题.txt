
（包括返回值）

//=========================================================== 抽象一个通用请求父类／接口
//=========================================================== 抽象一个通用请求父类／接口

public interface AuditRequest {
    int getScene();
}
// 然后让 SqlAuditDynamics、SqlAuditStatic、SqlAuditBaseLine 都 implements AuditRequest

//=========================================================== 把 Service 定义成泛型
//=========================================================== 把 Service 定义成泛型

public interface IAuditService<T extends AuditRequest> {
    boolean supports(Class<? extends AuditRequest> reqType);
    List<AuditResult> audit(T request);
}

//=========================================================== 每种审核实现各自指定类型
//=========================================================== 每种审核实现各自指定类型

@Service
public class SqlDynamicsAuditService implements IAuditService<SqlAuditDynamics> {
    public boolean supports(Class<? extends AuditRequest> reqType) {
        return SqlAuditDynamics.class.equals(reqType);
    }
    public List<AuditResult> audit(SqlAuditDynamics req) { /* ... */ }
}
// static 和 baseline 同理


//=========================================================== 每种审核实现各自指定类型
//=========================================================== 每种审核实现各自指定类型


@Service
public class FastAuditService {
    private final List<IAuditService<?>> services;

    public List<AuditResult> fastAudit(AuditRequest req) {
        IAuditService svc = services.stream()
            .filter(s -> s.supports(req.getClass()))
            .findFirst().orElseThrow();
        return svc.audit(req);
    }
}

