Python 确实是一种 解释型语言，
但它也涉及到 编译 的概念，
只是这个编译过程与传统的编译型语言（如 C/C++）有所不同。


//================================================================= Python 的编译过程
//================================================================= Python 的编译过程


（1）源码到字节码的编译：

当你运行一个 Python 脚本（.py 文件）时，
	Python 解释器会先将源码 编译 成 字节码（.pyc 文件）。
	这个编译过程是自动的，开发者通常不需要手动操作。
	字节码是 Python 的中间形式，
	适合由 Python 虚拟机（PVM，Python Virtual Machine）解释执行。

（2）字节码执行：

Python 虚拟机（PVM）会逐行解释字节码并执行，最终实现程序功能。

//================================================================= Python 和传统编译型语言的区别
//================================================================= Python 和传统编译型语言的区别

特性		Python（解释型）							C/C++（编译型）
————————————————————————————————————————————————————————————————————————————————————————————————
编译结果	编译为字节码（.pyc 文件），由虚拟机执行。	编译为机器码（可执行文件），直接运行。
执行效率	解释运行，效率较低。						直接运行，效率较高。
开发调试	修改后无需手动重新编译，直接运行源码即可。	每次修改后需重新编译生成可执行文件。
灵活性		动态类型，灵活强，适合快速开发。			静态类型，需明确定义变量类型。



//================================================================= 为什么 Python 会涉及“编译”？
//================================================================= 为什么 Python 会涉及“编译”？

Python 的编译并不是将代码转换为机器码，而是生成字节码，以便优化执行效率。
编译步骤是解释型语言实现中的常见机制，用来平衡 执行效率 和 开发灵活性。


//================================================================= 总结
//================================================================= 总结
虽然 Python 是脚本语言，但它也有“编译”这一概念，指的是将源码转换为字节码的过程。
这个编译过程是 自动的、透明的，开发者通常只需要专注于写代码，无需手动编译。
因此，虽然“编译”一词适用于 Python，但它的含义与传统编译型语言有所不同。



