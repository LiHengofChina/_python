
//======================================= 
//=======================================

给定一个数字数组。

	[2,4,6]

你需要将这些数字相加，并返回结果。

使用"循环"很容易完成这种任务。

//=======================================
//=======================================
	
如何使用 "递归函数" 来完成这种任务呢？
 
	/**
		(1) 找出简单的基线条件；
		(2) 确定如何缩小问题的规模，使其符合基线条件。
	*/
	//===============
	第一步：找出基线条件。
			最简单的数组什么样呢？请想想这个问题，
			再接着往下读。
			如果数组不包含任何元素或只包含一个元素，计算总和将非常容易。
			
			1 个元素 和 就是它自己
			0 个元素 和 为0
			
			因此这就是基线条件。

	第二步：每次 "递归调用" 都必须离 "空数组" 更近一步。
			如何缩小问题的规模呢？下面是一种办法。
			
		    
			
//=================================================================================================== 技巧
//=================================================================================================== 技巧

注意：
	编写 "涉及数组" 的递归函数时，
	"基线条件" 通常是 "数组为空或只包含一个元素" 。
	陷入困境时，请检查基线条件是不是这样的。
	


//===================================================================================================能用循环，为什么要使用递归呢
//===================================================================================================能用循环，为什么要使用递归呢

	你可能想，既然使用循环可轻松地完成任务，
	为何还要使用递归方式呢？

	看看 "函数式编程" 你就明白了！诸如 Haskell 等 "函数式编程语言" 没有 "循环"，

	因此你 "只能使用递归" 来编写这样的函数。
	

	如果你对递归有深入的认识，
	函数式编程语言学习起来将更容易。

	/**

		例如，使用 Haskell 时，你可能这样编写函数 sum。
		sum [] = 0 ←---------------------基线条件
		sum (x:xs) = x + (sum xs) ←------递归条件

		注意，这就像是你有函数的两个定义。
		符合基线条件时运行第一个定义，
		符合递归条件时运行第二个定义。
		也可以使用Haskell语言中的if语句来编写这个函数。

		sum arr = if arr == []
		then 0
		else (head arr) + (sum (tail arr))

		但前一个版本更容易理解。Haskell 大量使用了递归，
		因此它提供了各种方便实现递归的语法。
		如果你喜欢递归或想学习一门新语言，
		可以研究一下 Haskell。

		
	*/
	

